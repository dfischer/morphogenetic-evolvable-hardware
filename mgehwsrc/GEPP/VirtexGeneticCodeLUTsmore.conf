
# a gene decode/resource binding configuration file for Xilinx Virtex EHW
# without TFs and with extra LUT configuration options (LUTActiveFNs)
#       created from VirtexGeneticCodeNoTFs.conf Aug 2004, J.A. Lee
#
# Genes for use with EHW are decoded by mapping each resource types to a
# specific codon, as given in a resource decode table (a genetic code), and
# then by decoding that resource's settings according to the resource's own
# code. This is done by having a resource decode table, followed by a set
# of resource-attribute-setting's decode functions. The decoded values will
# be a list of: resource-name, attribute (as returned from function or
# default), setting1, setting2, ...
#
# The resource decode table must be stored in the scalar $GeneticCodeTable
# as a string, to be interpreted by the gene decoding scripts, which
# requires that the table be enclosed in quotes and explicitly assigned.
#
# the resource decode format is: codon, resource, resource attribute,
# number of codons following for settings, or [min number]'?' for variable
# length, where min number specifies the minimum number of codons that follow
# (so that these won't be checked for termination symbols) and a set of
# termination symbols follow as comma separated codons.
#
# To decode each specific "resource"s settings, a decode function needs to be
# provided, that takes the resource attribute as its first parameter, and
# the unprocessed settings codons as an array for its second parameter, and
# translates these into the resource's attribute-settings. It should also
# check that there are enough codons passed to it to do this - as premature
# termination of a gene may cut off the resource's attribute/settings codons.
#
# The return value from the function is a list of the resource's: attribute
# (possibly just the supplied attribute parameter), setting1, setting2, ..
#
# The decode function should be named as decode_"resource". eg: for SliceIn,
# this would be a function called decode_SliceIn. Note that this function may
# still be needed for those resources with no following codons (ie settings)
# if it needs to modify the resource's attribute value. Otherwise, the
# default function will simply return the resource-attribute.
#
# Also note, that codons that don't code for resources (such as start & stop
# codons) are not defined here, these codons will only include those that are
# extracted from within the coding region of a gene. Start and stop codons
# (and promoters) are defined at the level of chromosome parsing.
#
# Undefined codons, ie those with no resource defined should flag an error
# if there is an attempt to decode them. Hence, for unused codons, use the
# default Undef resource-type to avoid this problem. Its return attribute
# is the default attribute (as specified in the tabel), and it has no
# settings.

# IMPORTANT NOTE: when creating a new decode_resource function, if there are
#		  ANY (syntax etc) errors in it that prevent it from compiling
#		  then it WILL cause the loading of the ENTIRE genetic code
#		  from occuring!!!
#		  SO... test new decode functions separately before including
#		  here!!!


$GeneticCodeTable="

000, LUTActiveFN, G, 2
001, LUTActiveFN, F, 2
002, SliceIn, Ctrl, 2
003, SliceIn, Ctrl, 2
010, LUTIncrFN, F, 3
011, LUTBitFN, G, 4
012, LUTIncrFN, G, 3
013, LUTBitFN, F, 4
020, LUTActiveFN, F, 2
021, LUTActiveFN, G, 2
022, Undef, Null, 0		# doesn't code for a resource
023, Undef, Null, 0		# doesn't code for a resource
#022, STOP, OCHRE, 0		# biological stop codon - not needed here
#023, STOP, AMBER, 0		# biological stop codon - not needed here
030, SliceRAM, Null, 1
031, SliceRAM, Null, 1
032, Undef, Null, 0		# doesn't code for a resource
#032, STOP, OPAL, 0		# biological stop codon - not needed here
033, SliceIn, LUT, 2
100, SliceIn, LUT, 2
101, SliceIn, LUT, 2
102, SliceIn, LUT, 2
103, SliceIn, LUT, 2
110, SliceToOut, 0, 1
111, SliceToOut, 1, 1
112, SliceToOut, 2, 1
113, SliceToOut, 3, 1
120, SliceIn, Ctrl, 2
121, SliceIn, Ctrl, 2
122, SliceIn, Ctrl, 2
123, SliceIn, Ctrl, 2
130, SliceToOut, 3, 1
131, SliceToOut, 2, 1
132, SliceToOut, 1, 1
133, SliceToOut, 0, 1
200, SliceIn, LUT, 2
201, SliceIn, LUT, 2
202, SliceIn, LUT, 2
203, Undef, Null, 0		# doesn't code for a resource
#203, START, AUG, 0		# biological start codon - not needed here
210, LUTActiveFN, G, 2
211, LUTActiveFN, F, 2
212, LUTActiveFN, F, 2
213, LUTActiveFN, G, 2
220, SliceIn, LUT, 2
221, SliceIn, LUT, 2
222, SliceIn, LUT, 2
223, SliceIn, LUT, 2
230, LUTActiveFN, F, 2
231, LUTActiveFN, G, 2
232, LUTActiveFN, G, 2
233, LUTActiveFN, F, 2
300, OutToSingleBus, 0, 1
301, OutToSingleBus, 1, 1
302, OutToSingleBus, 2, 1
303, OutToSingleBus, 3, 1
310, OutToSingleDir, W, 1
311, OutToSingleDir, S, 1
312, OutToSingleDir, N, 1
313, OutToSingleDir, E, 1
320, OutToSingleDir, E, 1
321, OutToSingleDir, N, 1
322, OutToSingleDir, S, 1
323, OutToSingleDir, W, 1
330, OutToSingleBus, 3, 1
331, OutToSingleBus, 2, 1
332, OutToSingleBus, 1, 1
333, OutToSingleBus, 0, 1

";





# decode subroutines receive attribute and following codons as parameters
# 	$attr will contain the (default) attribute of this resource as
#	      specified in the genetic code table
# 	@codons will contain a list of codons that follow the resource-codon
# 		that was decoded to call this function. The length of this
#		list will at most be the length specified in the genetic code
#		table (which for variable length decodes will be the number
#		of codons upto and including the resource's stop codon), but
#		may be less if the gene ends prematurely.
# decode subroutines return a list of:
#	attribute, [ setting1, [ setting 2, ... ] ]
#
# NOTE: if there are errors in a subroutine, it may cause all subroutines to
#       cease working (due to compilation aborting) resulting in empty
#	results in decoded genes






# SliceIn:
#
# Attribute code
#
#   attribute-a (from resource/attribute codon) = LUT, Ctrl
#   attribute-b (slice input) = <ab.>
#
# 	ab    LUT input    Ctrl Input   to be implemented(*)/spare(+)
#      ----------------------------------------------------------------
# 	00	F1		Clk
# 	01	F2		TS*		BX+
# 	02	F3		CE		 +
# 	03	F4		SR		 +
# 	10	F4		BX
# 	11	F3		BY
# 	12	F2		SR
# 	13	F1		CE
# 	20	G1		Clk
# 	21	G2		TS*		BY+
# 	22	G3		BX		 +
# 	23	G4		BY		 +
# 	30	G4		BY
# 	31	G3		BX
# 	32	G2		CE
# 	33	G1		SR
#
#
# Setting code
#
# <XYZ>				XY(Z mod 2)=line #
#
# ie Z=0,2 and Z=1,3 are treated as the same code, leaving 32 distinct codes
# however, need to avoid codes <022><023><032>, so not using <0><2/3><0-3>
# leaving 28 useable codes, which is slightly more than the 25/26+1 input
# options, and far more than most of the available number of direct inputs
#
#	code				input line #
#
# 000 010 (020 030)			0, 2  (unused)
# 001 011 (021 031)			1, 3  (unused)
# 100 110 120 130			4, 6, 8, 10
# 101 111 121 131			5, 7, 9, 11
# 200 210 220 230			12, 14, 16, 18
# 201 211 221 231			13, 15, 17, 19
# 300 310 320 330			20, 22, 24, 26
# 301 311 321 331			21, 23, 25, 27
#
#
# input 0=OFF, 1 .. 27 = available lines, unused = no change

# decode_SliceIn takes:
#	- attr: LUT/Ctrl
#	- codon1: slice input #
#	- codon2: input line #
# decode_SliceIn returns:
#	- slice input: the slice LUT or Ctrl input - eg F1, or BY
#	- input line: an integer from 0 to 27, indicating chosen line,
#		with 0 for input OFF, and "" for ignore/no change

sub decode_SliceIn {
  my ($attr,@codons)=@_;
  my ($b1,$b2,$b3);
  my ($line_in,$slice_input);
  my @LUTi=("F1","F2","F3","F4","F4","F3","F2","F1",
            "G1","G2","G3","G4","G4","G3","G2","G1");
  my @CTRLi=("Clk","BX","CE","SR","BX","BY","SR","CE",
             "Clk","BY","BX","BY","BY","BX","CE","SR");

  if ($#codons+1>0) {
    $b1=substr($codons[0],0,1);
    $b2=substr($codons[0],1,1);
    $b3=substr($codons[0],2,1);
    $slice_input=($attr eq "LUT") ? $LUTi[$b1*4+$b2] : $CTRLi[$b1*4+$b2];

    if ($#codons+1>1) {
      $b1=substr($codons[1],0,1);
      $b2=substr($codons[1],1,1);
      $b3=substr($codons[1],2,1);

      if ($b1 eq "0" && ($b2 eq "2" || $b2 eq "3")) {
        $line_in=""; 				# not used
      }
      $line_in=($b1 * 8) + ($b2 * 2) + ($b3 % 2) - (($b1>0) ? 4 : 0);
    }
  }

  ($slice_input,$line_in);
}



# SliceToOut: Attribute/Setting code
#
# the Outbus line (mod 4) is encoded in the attribute, so need to combine
# the attribute with the settings to determine which (of the 8) bus lines
# to use
#
# Attribute code - gives complete Outbus line, OUT0-OUT7
#
#  attribute-a (from resource/attribute codon) = Outbus line mod 4
#  attribute-b (Outbus hi/lo 4 lines) = <aXY> (a is attribute-b, XY setting)
#  note that attribute-b and setting share the same codon
#
#	a = 0,1	- low 4 bus lines
#	a = 2,3 - high 4 bus lines
#
#
# Setting code - gives slice out line
#
#  setting  = <aXY> (a is from Attribute code above, XY gives setting code)
#
#  there are 5 or 6 choices of input line (X, XB, XQ, Y, YB, YQ) + OFF
#  input 0=OFF, input 7=NOP (reserved for later use for TBUF_OUT)
#  input 1 .. 6 = available lines (X, XB, XQ, Y, YB, YQ)
#  where that line isn't available, pad missing line with NOP (NOT USED)
#  (ie don't do anything, leave CLB as is)
#
#    X Y(mod 2)		    slice out line
#    00 01			2, 3
#    10 11			4, 5
#    20 21			6, 7
#    30 31			0, 1


# decode_SliceToOut takes:
#	- attr: outbus mod 4
#	- codon1: slice output #
# decode_SliceToOut returns:
#	- output bus line: OUT0-OUT7
#	- slice output: an integer from 0 to 7, indicating chosen line
#	  or "" indicating ignore - no change

sub decode_SliceToOut {
  my ($attr,@codons)=@_;
  my ($b1,$b2,$b3);
  my ($sliceoutput, $outbus);

  if ($#codons+1>0) {
    $b1=substr($codons[0],0,1);
    $b2=substr($codons[0],1,1);
    $b3=substr($codons[0],2,1);
    $outbus = $attr + (4 * int($b1 / 2));

    $sliceoutput = ($b2 * 2) + ($b3 % 2) +2;
    $sliceoutput = ($sliceoutput > 7 ) ? $sliceoutput - 8 : $sliceoutput;
  }

  ($outbus, $sliceoutput);
}



# OutToSingleBus: Attribute/Setting code
#
# there are 8 outbus lines, and for each bus line there are 6 singles lines
#
# the Outbus line (mod 4) is encoded in the attribute, so need to combine
# the attribute with the settings to determine which (of the 8) bus lines
# to use
#
# <XYZ>				XY = Bus-single Line, Z=ON, OFF setting
#
#	Y=0,1				low 4 bus lines
#	Y=2,3				high 4 bus lines
#
# XY				bus-single lines
#
# 00 01 02 03			lo-~ lo-~ hi-~ hi-~ (ignore to single)
# 10 11 12 13			lo-1 lo-2 hi-1 hi-2
# 20 21 22 23			lo-3 lo-4 hi-3 hi-4
# 30 31 32 33			lo-5 lo-6 hi-5 hi-6
#
#	Z == 0,2			OFF
#	Z == 1,3			ON

# decode_OutToSingleBus takes:
#	- attr: outbus mod 4
#	- codon1: single #, OFF/ON
# decode_OutToSingleBus returns:
#	- output bus line: the chosen bus line from 0 - 7
#	- to single: an integer from 1 to 6, indicating chosen line
#	  or "" indicating ignore - no change
#	- setting: 0 or 1, indicating line OFF or ON
#	  or "" indicating use default setting

sub decode_OutToSingleBus {
  my ($attr,@codons)=@_;
  my ($b1,$b2,$b3);
  my ($outbus,$tosingle,$setting);

  if ($#codons+1>0) {
    $b1=substr($codons[0],0,1);
    $b2=substr($codons[0],1,1);
    $b3=substr($codons[0],2,1);

    $outbus = $attr + (4 * int($b2 / 2));
    $tosingle = ($b1 - 1) * 2 + ($b2 % 2) +1; 	# but we ignore lines < 1
    if ($tosingle<1) { $tosingle=$setting=""; }	# ignore these lines
    else { $setting = $b3 % 2; }     		# OFF/ON
  }

  ($outbus, $tosingle, $setting);
}



# OutToSingleDir: Attribute/Setting code
#
# the attribute gives the direction (E,N,S,W)
# for each direction there are 12 outbus to single line connections
# available
#
# <XYZ>				XY = Line, Z=ON, OFF setting
#
#     XY			single line #
#
#  00 01 02 03			not assigned (ignore - no action)
#  10 11 12 13			1  2  3  4
#  20 21 22 23			5  6  7  8
#  30 31 32 33			9 10 11 12
#
#	Z == 0,2			OFF
#	Z == 1,3			ON

# decode_OutToSingleDir takes:
#	- attr: single direction
#	- codon1: single #, OFF/ON
# decode_OutToSingleDir returns:
#	- direction: the chosen (singles) direction of output (E,N,S,W)
#	- line: an integer from 1 to 12, indicating chosen outbus-single line
#	  or "" indicating ignore - no change
#	- setting: 0 or 1, indicating line OFF or ON
#	  or "" indicating use default setting

sub decode_OutToSingleDir {
  my ($attr,@codons)=@_;
  my ($b1,$b2,$b3);
  my ($dir, $line, $setting);

  if ($#codons+1>0) {
    $b1=substr($codons[0],0,1);
    $b2=substr($codons[0],1,1);
    $b3=substr($codons[0],2,1);

    $line = ($b1 - 1) * 4 + $b2 +1;		# but ignore lines < 1
    if ($line<1) { $line=$setting=""; }		# ignore these lines
    else { $setting = $b3 % 2; }		# OFF/ON
  }

  $dir=$attr;					# just for clarity

  ($dir, $line, $setting);
}



# SliceRAM: Setting code (attribute isn't used)
#
#   <XY.>			XY = resource to set
#
#      XY			      Resource
#
#   00 01 02 03			SHIFT 16X2  1-LUT SPRAM  } DUAL_MODE.OFF
#   10 11 12 13			2-LUT 2-LUT 2-LUT DPRAM  } DUAL_MODE.ON
#   20 21 22 23			SHIFT SHIFT SHIFT SPRAM  } DUAL_MODE.OFF
#   30 31 32 33			2-LUT 32X1  2-LUT DPRAM  } DUAL_MODE.ON
#
#   rather than encoding dual/single ported RAM, single/dual LUT 32X1/16X2
#   in the settings, we return the mode (DUAL_MODE.OFF/DUAL_MODE.ON)
#   and leave settings as one of: LUT, SHIFT, RAM, 32X1; to reflect
#   the JBits settings used (in respective order):
#	LUT_MODE.ON; F_LUT_SHIFTER.ON + G_LUT_SHIFTER.ON; 
#	F_LUT_RAM.ON + G_LUT_RAM.ON; RAM_32_X_1.ON

# decode_SliceRAM takes:
#	- attr: Null (ignored)
#	- codon1: encodes the settings for S[0|1]RAM
# decode_SliceRAM returns:
#	- dual mode: DUAL_OFF or DUAL_ON indicating the setting for DUAL_MODE
#	- setting: one of LUT, RAM, SHIFT, 32X1

sub decode_SliceRAM {
  my ($attr,@codons)=@_;
  my ($b1,$b2,$b3);
  my ($mode,$setting);
  my @DUALi=("DUAL_OFF","DUAL_ON");
  my @RAMi=(
  	    "SHIFT","32X1", "LUT",  "RAM",
            "LUT",  "LUT",  "LUT",  "LUT",
            "SHIFT","SHIFT","SHIFT","SHIFT",
            "LUT",  "32X1", "LUT",  "RAM"
	    );

  if ($#codons+1>0) {
    $b1=substr($codons[0],0,1);
    $b2=substr($codons[0],1,1);
    $b3=substr($codons[0],2,1);

    $mode=$DUALi[$b1%2];
    $setting=$RAMi[$b1*4+$b2];
  } else {
    $mode=$setting="";
  }

  ($mode,$setting);
}


# LUTBitFN: Attribute/Setting code
#
# the attribute gives which of the 2 LUTs is used (F or G)
#
# the 16 bit array that sets the LUTs function is encoded into 4 codons by
# ignoring the low order digit of each codon, so that STOP codons can be
# avoided, and to allow some redundancy
#
# <ab.><cd.><ef.><gh.>		=> abcdefgh (base 4)
#				=> AaBbCcDdEeFfGgHh (base 2)
#				   where upper case char is high order bit
#					 lower case char is low order bit

# decode_LUTBitFN takes:
#	- attr: F/G
#	- codon1-4: LUT config
# decode_LUTBitFN returns:
#	- LUT F/G: from the decode table - the LUT being set (F or G)
#	- bitset: a binary string (upto 16 bits), which is the fn setting
#	  or "" indicating ignore - no change

sub decode_LUTBitFN {
  my ($attr,@codons)=@_;
  my ($b1,$b2,$b3);
  my ($lutfg,$bitset,$c);

  $bitset="";
  foreach $c (@codons) {	# should be 4 codons, but if less fix later
    $b1=substr($c,0,1);
    $b2=substr($c,1,1);
    # $b3=substr($c,2,1);			# ignore 3rd base
    $bitset .= int($b1/2) . ($b1%2) . int($b2/2) . ($b2%2);
  }

  $lutfg=$attr;					# just for clarity

  ($lutfg,$bitset);

}



# LUTIncrFN: Attribute/Setting code
#
# the attribute gives which of the 2 LUTs is used (F or G)
#
# <op-set><lines><inv>
#	<set-op>: set=a, op=bc
#	      	   set's are: SET,OR,XOR,AND
#			these determine the relation between existing
#			LUT FN settings and this function (specified
#			in bases a and b). eg and AND would and the
#			bit pattern for this FN with the exiting LUT
#			settings; a SET clears existing settings,
#			making this the sole FN/op
#		  ops are: AND,OR,XOR,XNOR,NAND,NOR,MaJoRity0,MaJoRity1
#		       MJR0 is majority fn with ties broken with a 0
#		       MJR1 is majority fn with ties broken with a 1
#		       for single input expressions, op is applied
#		       to the same line:
#			 l AND/OR l -> l; l NAND/NOR l -> ~l;
#		  	 l XOR l -> 0
# 	<lines>=<ab.>: aabb => l1,l2,l3,l4 (binary) specifies which
#			lines are applied in this expression
#	<inv>=<ab.>: aabb => l1,l2,l3,l4 (binary) specifies which
#			selected lines are inverted in this expression.
#			This should be ANDed with <lines> to invert the
#			appropriate lines 
#
#
#   op-code			operator
#
# 00 01 02 03		XNOR, MJR0, XOR,  MJR1
# 10 11 12 13		AND,  NOR,  NAND, OR
# 20 21 22 23		XOR,  MJR1, XNOR, MJR0
# 30 31 32 33		OR,   NAND, NOR,  AND
#
#   set-code		       operator
#
#	0			SET
#	1			OR
#	2			XOR
#	3			AND

# decode_LUTIncrFN takes:
#	- attr: F/G
#	- codon1: set,operation
#	- codon2: input lines
#	- codon3: input line inversion mask
# decode_LUTIncrFN returns:
#	- LUT F/G: from the decode table - the LUT being set (F or G)
#	- set: how to combine this function with pre-existing functions
#	- op: boolean operation to apply to selected lines
#	- lines: 4 character string, indicating lines involved in operation;
#		 0's indicate inverted line, 1's - input line uninverted,
#		 -'s indicate line isn't used in this operation
#	if any of set,op,lines returns "", this indicates ignore - no change

sub decode_LUTIncrFN {
  my ($attr,@codons)=@_;
  my ($b1,$b2,$b3,$i);
  my ($lbits,$ibits);
  my ($lutfg,$set,$op,$lines);
  my @setcodes=("SET","OR","XOR","AND");
  my @opcodes=("XNOR","MJR0","XOR","MJR1",
  	       "AND","NOR","NAND","OR",
  	       "XOR","MJR1","XNOR","MJR0",
  	       "OR","NAND","NOR","AND");

  $lutfg=$attr;					# just for clarity

  if ($#codons+1>0) {
    # base 1 of 1st codon encodes the way in which this LUT expression
    # should be integrated with the exiting LUT fn
    $b1=substr($codons[0],0,1);
    $set=$setcodes[$b1];

    # 1st codon encodes boolean operator to be applied to selected lines,
    # in bases 2 and 3
    $b2=substr($codons[0],1,1); $b3=substr($codons[0],2,1);
    $op=$opcodes[$b2*4+$b3];

    if ($#codons+1>1) {
      # 2nd codon encodes (in bases 1 & 2) the lines used for this LUT fn
      $b1=substr($codons[1],0,1); $b2=substr($codons[1],1,1);
      $lbits = int($b1/2) . ($b1%2) . int($b2/2) . ($b2%2);
      # inactive lines are denoted by '-' as '0' will be used to denote invert
      $lbits =~ s/0/-/g;

      if ($#codons+1>2) {
        # 3rd codon encodes (in bases 1 & 2) which lines should be inverted
        $b1=substr($codons[2],0,1); $b2=substr($codons[2],1,1);
        $ibits = int($b1/2) . ($b1%2) . int($b2/2) . ($b2%2);

        # invert the appropriate lines - only applies to those that are used
        for ($i=0;$i<length($ibits);$i++) {
          if (substr($lbits,$i,1) == 1 && substr($ibits,$i,1) == 1) {
            # inverted lines are denoted by a '0'
            substr($lbits,$i,1)="0";
          }
        }

        $lines=$lbits;				# for clarity
      }
    }
  }

  ($lutfg,$set,$op,$lines);
}



# LUTActiveFN: Attribute/Setting code
#
# the attribute gives which of the 2 LUTs is used (F or G)
#
# <op><inv>
#	<op>= <ab.>
#		  ops are: AND,OR,XOR,XNOR,NAND,NOR,MaJoRity0,MaJoRity1
#		       MJR0 is majority fn with ties broken with a 0
#		       MJR1 is majority fn with ties broken with a 1
#		       for single input expressions, op is applied
#		       to the same line:
#			 l AND/OR l -> l; l NAND/NOR l -> ~l;
#		  	 l XOR l -> 0
#	<inv>=<ab.>: aabb => l1,l2,l3,l4 (binary) specifies which
#			selected lines are inverted in this expression.
#
#
#   op-code			operator
#
# 00 01 02 03		XNOR, MJR0, XOR,  MJR1
# 10 11 12 13		AND,  NOR,  NAND, OR
# 20 21 22 23		XOR,  MJR1, XNOR, MJR0
# 30 31 32 33		OR,   NAND, NOR,  AND
#

# decode_LUTActiveFN takes:
#	- attr: F/G
#	- codon1: operation
#	- codon2: inversion mask
# decode_LUTActiveFN returns:
#	- LUT F/G: from the decode table - the LUT being set (F or G)
#	- op: boolean operation to apply to active lines
#	- lines: 4 character string, indicating which lines are inverted
#		 0's indicate inverted line, 1's - input line uninverted
#		 for active lines 1-4
#	if op returns "", this indicates ignore - no change, inv is optional


sub decode_LUTActiveFN {
  my ($attr,@codons)=@_;
  my ($b1,$b2,$b3,$i);
  my ($lbits,$ibits);
  my ($lutfg,$op,$lines);
  my @opcodes=("XNOR","MJR0","XOR","MJR1",
  	       "AND","NOR","NAND","OR",
  	       "XOR","MJR1","XNOR","MJR0",
  	       "OR","NAND","NOR","AND");

  $lutfg=$attr;					# just for clarity

  if ($#codons+1>0) {
 
    # 1st codon encodes boolean operator to be applied to selected lines,
    # in bases 1 and 2
    $b1=substr($codons[0],1,1); $b2=substr($codons[0],2,1);
    $op=$opcodes[$b1*4+$b2];

    if ($#codons+1>1) {
      # 2nd codon encodes (in bases 1 & 2) which lines should be inverted
      # inverted lines are denoted by a '0'
      $b1=substr($codons[1],0,1); $b2=substr($codons[1],1,1);
      $ibits = int($b1/2) . ($b1%2) . int($b2/2) . ($b2%2);

      $lines=$ibits;				# for clarity
    }
  }

  ($lutfg,$op,$lines);
}



# TF: Attribute/Setting code
#
# the attribute indicates if it is local, cytoplasm or morphogen TF, in the
# latter case, the first 2 codons are interpreted as the spread from source,
# while the following codons are treated as in local/cytoplasm TF, for
# determining the binding sequence.
#
# Spread from source is encoded in 2 codons, by ignoring the last base of
# each codon, and then converting the remaining 4 bases (ie <wx.><yz.> -> wxyz)
# to their 8 digit binary equivalent, which is the Gray coding for the distance
# to spread away from the source in different axis/directions, as follows:
# 	- digits 0-3 represent the row spread in Gray code
#		- digits 0,1 gives extent of spread to rows in -ve direction
#		- digits 2,3 gives extent of spread to rows in +ve direction
#	- digits 4-7 represent the col spread in Gray code
#		- digits 4,5 gives extent of spread to cols in -ve direction
#		- digits 6,7 gives extent of spread to cols in +ve direction
#	- Gray code is 00=0, 01=1, 11=2, 10=3
# 
# the binding sequence is decoded using the following table, and is
# terminated with an end-of-expression (Stop) marker, which doesn't
# contribute to the binding sequence.
#
#  codon				codes for
#
# 000 010 020 030			00 01 02 03
# 001 011 021 031			00 01 02 03
# 002 012 022 032			0  0 STOP STOP
# 003 013 023 033			0  0 STOP (unused)
#
# 100 110 120 130			10 11 12 13
# 101 111 121 131			10 11 12 13
# 102 112 122 132			1  1  1  0
# 103 113 123 133			1  1  1  0
#
# 200 210 220 230			20 21 22 23
# 201 211 221 231			20 21 22 23
# 202 212 222 232			2  2  stop stop
# 203 213 223 233			2  2  stop (unused)
#
# 300 310 320 330			30 31 32 33
# 301 311 321 331			30 31 32 33
# 302 312 322 332			3  3  3  2
# 303 313 323 333			3  3  3  2

# decode_TF takes:
#	- attr: type "Local" or "Morphogen"
#		Local codons 1-N: bind sequence
#		Morphogen codons 1,2: spread from source
#		          codons 3-N: bind sequence
# decode_TF returns:
#	- TF type: "Local" or "Morphogen"
#	- spread from src: "-" indicating local TF, or an 8 digit binary string
#	- bind str: string of bases that is sequence for binding to chrom
#	if bind str returns "", this indicates ignore - no change
# note that if a local TF, then spread is  returned as "-", which should be
# discarded. this is solely so that TF doesn't appear to be unprocessed.

sub decode_TF {
  my ($attr,@codons)=@_;
  my $tftype=$attr;
  my $srcdist="";
  my $bindstr="";
  my ($b1,$b2,$b3);
  my ($c);
  my %stops=("222","stop","223","stop","232","stop");

  if ($tftype eq "Local") {
    # distance from src is "-" for Local TF's .. this is stripped off later
    $srcdist="-";
  } elsif ($tftype eq "Morphogen") {
    # if its a morphogen get its distance it will spread from source
    # which is represented by the first 2 codons (in Gray code)
    if ($#codons+1>0) {
      $c=shift(@codons);
      $b1=substr($c,0,1); $b2=substr($c,1,1);
      $srcdist .= int($b1/2) . ($b1%2) . int($b2/2) . ($b2%2);
      if ($#codons+1>0) {
        $c=shift(@codons);
        $b1=substr($c,0,1); $b2=substr($c,1,1);
        $srcdist .= int($b1/2) . ($b1%2) . int($b2/2) . ($b2%2);
      }
    }
  } else {
    die("Unknown TF type (".$tftype.") generated by genetic code!");
  }

  # decode the rest of the TF as the binding sequence 

  # if last codon is stop marker, then strip it
  if (@codons && $stops{$codons[$#codons]}) { pop(@codons); }

  foreach $c (@codons) {
    $b1=substr($c,0,1);
    $b2=substr($c,1,1);
    $b3=substr($c,2,1);
    unless ($c eq "033" || $c eq "233") {	# for not ignored codons
      if (int($b3/2)==1) {			# is it coding single digits
        # the $b1-1 works coz already eliminated stop and unused codons
        $bindstr .= ($b1 % 2 == 1 && $b2 eq "3") ? $b1-1 : $b1;
      }
      else {
        $bindstr .= $b1 . $b2;			# othewise ignore 3rd base
      }
    }
  }

  ($tftype,$srcdist,$bindstr);
}




### end gene decode routines. regulatory region decode table & Fn's follow



# the following is for determining (decoding) the binding of resources
# to regulatory sequences. currently these are based on the gene decode
# sequences, but actually, there is no requirement for this
# For each bindable resource, a bind_RESOURCE function needs to be
# supplied, these take the same arguments, and return values in the same
# manner as the decode_RESOURCE functions.
#
# As the "BindCodeTable" table is used for matching resources to binding
# (regulatory) regions, it is especially important that codons that aren't
# used for defining resources are assigned "Undef", as due to the
# transformations done on regulatory regions, these may result in non-coding
# codons, which we don't want treated as though they match a resource.
# For example defining 032 as "Stop", could confuse the binding mechanism
# into thinking that a resource that is named "Stop" can bind to a location
# on the regulatory region of a gene. Use of "Undef" will ensure that this
# doesn't occur.
#
# Note also, that the "BindSite" non-Virtex-resource type is a reserved
# type, as are the "Undef" and "TF" types. The "BindSite" type is used for
# locating binding sites within regulatory regions, and so should be defined
# along with a bind_BindSite function, which is needed to find the end of
# the binding site. It is not, however, necessary for bind sites to be
# variable length, fixed length bind sites could also be used.

# Note that we don't need TFs to be defined here, as these are gene products,
# or cytoplasmic determinants and as such, will be matched solely on their
# sequence, they don't need a specific bind site element defined.
#
# "connect_" prepended attributes mean that the resource is located in
# another CLB, and so it is a connection from another CLB that will be
# queried. eg a CLB input (SliceIn) resource would query the associated
# OutToSingle(Bus|Dir) single line. This is done by allocating "connect_"
# attribute-prepended entries to the connecting resource (not the connected
# resource). The resource bind function for this then decodes this as usual
# but with its returned attribute prepended with "connect_", so that its
# offset can be determined when it is translated to JBits settings.

$BindCodeTable="

000, BindSite, Null, ?, 022, 023, 032, 222, 223, 232
001, BindSite, Null, ?, 022, 023, 032, 222, 223, 232
002, SliceIn, connect_Ctrl, 2
003, SliceIn, Ctrl, 2
010, LUTIncrFN, F, 3
011, LUTBitFN, G, 4
012, LUTIncrFN, G, 3
013, LUTBitFN, F, 4
020, BindSite, Null, ?, 022, 023, 032, 222, 223, 232
021, BindSite, Null, ?, 022, 023, 032, 222, 223, 232
022, Undef, Null, 0		# doesn't code for a resource
023, Undef, Null, 0		# doesn't code for a resource
#022, STOP, OCHRE, 0		# biological stop codon - not needed here
#023, STOP, AMBER, 0		# biological stop codon - not needed here
030, SliceRAM, Null, 1
031, SliceRAM, Null, 1
032, Undef, Null, 0		# doesn't code for a resource
#032, STOP, OPAL, 0		# biological stop codon - not needed here
033, SliceIn, LUT, 2
100, SliceIn, connect_LUT, 2
101, SliceIn, LUT, 2
102, SliceIn, connect_LUT, 2
103, SliceIn, LUT, 2
110, SliceToOut, 0, 1
111, SliceToOut, 1, 1
112, SliceToOut, 2, 1
113, SliceToOut, 3, 1
120, SliceIn, connect_Ctrl, 2
121, SliceIn, Ctrl, 2
122, SliceIn, connect_Ctrl, 2
123, SliceIn, Ctrl, 2
130, SliceToOut, 3, 1
131, SliceToOut, 2, 1
132, SliceToOut, 1, 1
133, SliceToOut, 0, 1
200, SliceIn, connect_LUT, 2
201, SliceIn, LUT, 2
202, SliceIn, connect_LUT, 2
203, Undef, Null, 0		# doesn't code for a resource
#203, START, AUG, 0		# biological start codon - not needed here
210, LUTActiveFN, G, 2
211, LUTActiveFN, F, 2
212, LUTActiveFN, F, 2
213, LUTActiveFN, G, 2
220, SliceIn, LUT, 2
221, SliceIn, LUT, 2
222, SliceIn, LUT, 2
223, SliceIn, LUT, 2
230, LUTActiveFN, F, 2
231, LUTActiveFN, G, 2
232, LUTActiveFN, G, 2
233, LUTActiveFN, F, 2
300, OutToSingleBus, connect_0, 1
301, OutToSingleBus, 1, 1
302, OutToSingleBus, connect_2, 1
303, OutToSingleBus, 3, 1
310, OutToSingleDir, connect_W, 1
311, OutToSingleDir, S, 1
312, OutToSingleDir, connect_N, 1
313, OutToSingleDir, E, 1
320, OutToSingleDir, connect_E, 1
321, OutToSingleDir, N, 1
322, OutToSingleDir, connect_S, 1
323, OutToSingleDir, W, 1
330, OutToSingleBus, connect_3, 1
331, OutToSingleBus, 2, 1
332, OutToSingleBus, connect_1, 1
333, OutToSingleBus, 0, 1

";




# bind_BindSite takes:
#	- attr: Null (ignored)
#	- codon1-N: bind sequence
# bind_BindSite returns:
#	- bind str: string of bases that is sequence for binding to chrom
#	if bind str returns "", this indicates ignore - no change

sub bind_BindSite {
  my ($attr,@codons)=@_;
  my $bindstr="";
  my ($b1,$b2,$b3);
  my ($c);
  my %stops=("222","stop","223","stop","232","stop");

  # decode the rest as the binding sequence 

  # if last codon is stop marker, then strip it
  if (@codons && $stops{$codons[$#codons]}) { pop(@codons); }

  foreach $c (@codons) {
    $b1=substr($c,0,1);
    $b2=substr($c,1,1);
    $b3=substr($c,2,1);
    unless ($c eq "033" || $c eq "233") {	# for not ignored codons
      if (int($b3/2)==1) {			# is it coding single digits
        # the $b1-1 works coz already eliminated stop and unused codons
        $bindstr .= ($b1 % 2 == 1 && $b2 eq "3") ? $b1-1 : $b1;
      }
      else {
        $bindstr .= $b1 . $b2;			# othewise ignore 3rd base
      }
    }
  }

  ($bindstr);
}




# bind_SliceIn takes:
#	- attr: [connect_] LUT/Ctrl
#	- codon1: slice input #
#	- codon2: input line #
# bind_SliceIn returns:
#	- slice input: the slice LUT or Ctrl input - eg F1, or BY
#		       with "connect_" prepended if attr was
#	- input line: an integer from 0 to 27, indicating chosen line,
#		with 0 for input OFF, and "" for ignore/no change

sub bind_SliceIn {
  my ($attr,@codons)=@_;
  my ($b1,$b2,$b3);
  my ($line_in,$slice_input);
  my @LUTi=("F1","F2","F3","F4","F4","F3","F2","F1",
            "G1","G2","G3","G4","G4","G3","G2","G1");
  my @CTRLi=("Clk","BX","CE","SR","BX","BY","SR","CE",
             "Clk","BY","BX","BY","BY","BX","CE","SR");

  my $connect=($attr=~s/^connect_//) ? "connect_" : "";

  if ($#codons+1>0) {
    $b1=substr($codons[0],0,1);
    $b2=substr($codons[0],1,1);
    $b3=substr($codons[0],2,1);
    $slice_input=($attr eq "LUT") ? $LUTi[$b1*4+$b2] : $CTRLi[$b1*4+$b2];
    $slice_input=$connect . $slice_input;

    if ($#codons+1>1) {
      $b1=substr($codons[1],0,1);
      $b2=substr($codons[1],1,1);
      $b3=substr($codons[1],2,1);

      if ($b1 eq "0" && ($b2 eq "2" || $b2 eq "3")) {
        $line_in=""; 				# not used
      }
      $line_in=($b1 * 8) + ($b2 * 2) + ($b3 % 2) - (($b1>0) ? 4 : 0);
    }
  }

  ($slice_input,$line_in);
}




# bind_OutToSingleBus takes:
#	- attr: [connect_] outbus mod 4
#	- codon1: single #, OFF/ON
# bind_OutToSingleBus returns:
#	- output bus line: the chosen bus line from 0 - 7
#		 with "connect_" prepended if attr was
#	- to single: an integer from 1 to 6, indicating chosen line
#	  or "" indicating ignore - no change
#	- setting: 0 or 1, indicating line OFF or ON
#	  or "" indicating use default setting

sub bind_OutToSingleBus {
  my ($attr,@codons)=@_;
  my ($b1,$b2,$b3);
  my ($outbus,$tosingle,$setting);

  my $connect=($attr=~s/^connect_//) ? "connect_" : "";

  if ($#codons+1>0) {
    $b1=substr($codons[0],0,1);
    $b2=substr($codons[0],1,1);
    $b3=substr($codons[0],2,1);

    $outbus = $attr + (4 * int($b2 / 2));
    $outbus=$connect . $outbus;

    $tosingle = ($b1 - 1) * 2 + ($b2 % 2) +1; 	# but we ignore lines < 1
    if ($tosingle<1) { $tosingle=$setting=""; }	# ignore these lines
    else { $setting = $b3 % 2; }     		# OFF/ON
  }

  ($outbus, $tosingle, $setting);
}



# bind_OutToSingleDir takes:
#	- attr: [connect_] single direction
#	- codon1: single #, OFF/ON
# bind_OutToSingleDir returns:
#	- direction: the chosen (singles) direction of output (E,N,S,W)
#		 with "connect_" prepended if attr was
#	- line: an integer from 1 to 12, indicating chosen outbus-single line
#	  or "" indicating ignore - no change
#	- setting: 0 or 1, indicating line OFF or ON
#	  or "" indicating use default setting

sub bind_OutToSingleDir {
  my ($attr,@codons)=@_;
  my ($b1,$b2,$b3);
  my ($dir, $line, $setting);

  my $connect=($attr=~s/^connect_//) ? "connect_" : "";

  $dir=$attr;			# just for clarity
  if ($#codons+1>0) {
    $b1=substr($codons[0],0,1);
    $b2=substr($codons[0],1,1);
    $b3=substr($codons[0],2,1);

    $line = ($b1 - 1) * 4 + $b2 +1;		# but ignore lines < 1
    if ($line<1) {
      $line=$setting="";			# ignore these lines
    } else {
      $setting = $b3 % 2;			# OFF/ON
      $dir=$connect . $dir;
    }
  }


  ($dir, $line, $setting);
}





# bind_SliceToOut only binds locally, so it just uses decode_SliceToOut
#	- attr: outbus mod 4
#	- codon1: slice output #
# bind_SliceToOut returns:
#	- output bus line: OUT0-OUT7
#		 with "connect_" prepended if attr was
#	- slice output: an integer from 0 to 7, indicating chosen line
#	  or "" indicating ignore - no change

sub bind_SliceToOut { decode_SliceToOut(@_); }



# bind_SliceRAM  only binds locally, so it just uses decode_SliceRAM
#	- attr: Null (ignored)
#	- codon1: encodes the settings for S[0|1]RAM
# bind_SliceRAM returns:
#	- dual mode: DUAL_OFF or DUAL_ON indicating the setting for DUAL_MODE
#	- setting: one of LUT, RAM, SHIFT, 32X1

sub bind_SliceRAM { decode_SliceRAM(@_); }



# bind_LUTBitFN only binds locally, so it just uses decode_LUTBitFN
#	- attr: F/G
#	- codon1-4: LUT config
# bind_LUTBitFN returns:
#	- LUT F/G: from the decode table - the LUT being set (F or G)
#	- bitset: a binary string (upto 16 bits), which is the fn setting
#	  or "" indicating ignore - no change

sub bind_LUTBitFN { decode_LUTBitFN(@_); }



# bind_LUTIncrFN only binds locally, so it just uses decode_LUTIncrFN
#	- attr: F/G
#	- codon1: set,operation
#	- codon2: input lines
#	- codon3: input line inversion mask
# bind_LUTIncrFN returns:
#	- LUT F/G: from the decode table - the LUT being set (F or G)
#	- set: how to combine this function with pre-existing functions
#	- op: boolean operation to apply to selected lines
#	- lines: 4 character string, indicating lines involved in operation;
#		 0's indicate inverted line, 1's - input line uninverted,
#		 -'s indicate line isn't used in this operation
#	if any of set,op,lines returns "", this indicates ignore - no change

sub bind_LUTIncrFN { decode_LUTIncrFN(@_); }



# bind_LUTActiveFN only binds locally, so it just uses decode_LUTActiveFN
#	- attr: F/G
#	- codon1: operation
#	- codon2: inversion mask
# decode_LUTActiveFN returns:
#	- LUT F/G: from the decode table - the LUT being set (F or G)
#	- op: boolean operation to apply to active lines
#	- lines: 4 character string, indicating which lines are inverted
#		 0's indicate inverted line, 1's - input line uninverted
#		 for active lines 1-4
#	if op returns "", this indicates ignore - no change, inv is optional

sub bind_LUTActiveFN { decode_LUTActiveFN(@_); }


# bind_TF should not be defined, as binding of TFs is done differently to
# that of Virtex resources. it is based purely on the sequence of bases
# encountered within a binding region, rather than requiring a special TF
# codon to be encountered. see also bindmatch.pl for more info

# sub bind_TF { decode_TF(@_); }




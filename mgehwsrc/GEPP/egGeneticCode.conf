
# an example gene decode configuration file, J.A. Lee, April 2003
#
#
# Genes are decoded by mapping each resource types to a specific codon,
# as given in a resource decode table (a genetic code), and then by decoding
# that resource's settings according to the resource's own code. This is
# done by having a resource decode table, followed by a set of
# resource-attribute-setting's decode functions. The decoded values will
# be a list of: resource-name, attribute (as returned from function or
# default), setting1, setting2, ...
#
# The resource decode table must be stored in the scalar $GeneticCodeTable
# as a string, to be interpreted by the gene decoding scripts, which
# requires that the table be enclosed in quotes and explicitly assigned.
#
# the resource decode format is: codon, resource, resource attribute,
# number of codons following for settings, or '?' for variable length - in
# which case the termination symbols follow as comma separated codons
#
# To decode each specific "resource"s settings, a decode function needs to be
# provided, that takes the resource attribute as its first parameter, and
# the unprocessed settings codons as an array for its second parameter, and
# translates these into the resource's attribute-settings. The return value
# from the function is a list of: resource-attribute (possibly just the
# supplied attribute parameter), resource-setting1, setting2, ..
#
# The decode function should be named as decode_"resource". eg: for SliceIn,
# this would be a function called decode_SliceIn. Note that this function may
# still be needed for those resources with no following codons (ie settings)
# if it needs to modify the resource's attribute value. Otherwise, the
# default function will simply return the resource-attribute.
#
# Also note, that start & stop codons are not defined here, these codons
# will only include those that are extracted from within the coding region
# of a gene. Start and stop codons (and promoters) are defined at the level
# of chromosome parsing.
#
# Undefined codons, ie those with no resource defined should flag an error
# if there is an attempt to decode them. Hence, for unused codons, use the
# default Undef resource-type to avoid this problem. Its return attribute
# is the default attribute (as specified in the tabel), and it has no
# settings. Note, that not defining stop codons here, as genes shouldn't
# contain them except at the end (which is stripped off), so if they somehow
# do get left in somewhere (when genes are parsed), an error will be flagged.



$GeneticCodeTable="

000, AAA, 000, 0		# decode to resource=AAA, attribute=000
001, AAA, 001, 0
002, AAA, 002, 0
003, AAA, 003, 0

# etc...

#022, STOP, OCHRE, 0		# biological stop codon - not needed here
#023, STOP, AMBER, 0		# biological stop codon - not needed here
#032, STOP, OPAL, 0		# biological stop codon - not needed here

# etc...

111, Example_Resource1, binary, 1	# has 1 following codon to decode

# etc ...

203, Undef, Null, 0		# not used
#203, START, AUG, 0		# biological start codon - not needed here

# etc ...

333, Example_Resource2, binary, ?, 000 # variable length, terminated with 000

";


### decoding functions follow


# decode subroutines receive attribute and following codons as parameters
# 	$attr will contain the (default) attribute of this resource as
#	      specified in the genetic code table
# 	@codons will contain a list of codons that follow the resource-codon
# 		that was decoded to call this function. The length of this
#		list will at most be the length specified in the genetic code
#		table (which for variable length decodes will be the number
#		of codons upto and including the resource's stop codon), but
#		may be less if the gene ends prematurely.
# decode subroutines return a list of:
#	attribute, [ setting1, [ setting 2, ... ] ]
#
# NOTE: if there are errors in a subroutine, it may cause all subroutines to
#       cease working (due to compilation aborting) resulting in empty
#	results in decoded genes




# decode_Example_Resource1 is an example resource decoding function for a
# gene table entry such as:
# 	111, Example_Resource1, binary, 1
# that will return its default attribute, and a setting which is a single
# codon converted to a binary string

sub decode_Example_Resource1 {
  my ($attr,@codons)=@_;
  my ($b1,$b2,$b3);
  my $mod_attr=$attr;			# not modifying attribute
  my $set;

  if ($#codons+1) {		# if at least one codon to be processed
    $b1=substr($codons[0],0,1);
    $b2=substr($codons[0],1,1);
    $b3=substr($codons[0],2,1);

    # convert from base 4 to binary
    $set=int($b1/2) . ($b1%2) . int($b2/2) . ($b2%2) . int($b3/2) . ($b3%2);
  }


  ($mod_attr, $set);
}



# decode_Example_Resource2 is an example resource decoding function for a
# gene table entry such as:
# 	333, Example_Resource2, binary, ?, 000
# that will return its default attribute with the count of decoded settings
# appended, and a list of settings which is the codons that follow the
# resource codon, and preceding the stop codon, converted to binary strings

sub decode_Example_Resource2 {
  my ($attr,@codons)=@_;
  my ($b1,$b2,$b3);
  my ($bitset, $cnt, $set, $c);
  my @settings=();

  # if last codon is stop marker, then strip it
  if (@codons && $codons[$#codons] eq "000") { pop(@codons); }
  foreach $c (@codons) {			# convert the rest to binary
    $b1=substr($c,0,1);
    $b2=substr($c,1,1);
    $b3=substr($c,2,1);
    $set=int($b1/2) . ($b1%2) . int($b2/2) . ($b2%2) . int($b3/2) . ($b3%2);
    push(@settings,$set);
  }

  $cnt=$#codons+1;
  $attr .= ":" . $cnt;

  ($cnt,@settings);
}




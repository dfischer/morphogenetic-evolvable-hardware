
# this configuration file is for logic element granularity EHW
# on a slimmed down model of CLB resources
#
#			modified from slimconvToJBits.conf
#			J.A. Lee, February 2003
#		added support for "connect"-ing (non-local) resources
#		to SliceIn, OutToSingleBus, OutToSingleDir decode fn's
#				March 2004

# this file is a slimmed down version, with limited resources and resource
# settings, to facilitate rapid circuit evaluation by tracing connections
# rather than needing to use the simulator, and to simplify the task for
# evolution to solve, while allowing the solutions to be used as starting
# points for evolving circuits that use all the available CLB resources and
# connections.
#
#			modified from convToJBits.conf
#			J.A. Lee, February 2003

# configuration file, containing scripts for conversion from Virtex-Resource,
# Atrribute, Setting number format (as generated from decoding a chromosome
# according to the Virtex genetic code) to JBits bits and value constants.
#
#                   	adapted from ResourceToJBits.conf
#			J.A. Lee, December 2003
#
# This file contains all the scripts necessary for converting from resource,
# attribute, setting number format to the equivalent JBits constants. As such,
# each resource type should have an associated conv2jbits_RESOURCENAME
# function defined here, which takes parameters:
#	attr, settings.
# The 'attr' and 'settings' parameters are the attribute and settings that
# are returned from their associated genetic table's decode_RESOURCENAME
# function. An empty string in settings[0] should be taken as indicating no
# change to the current settings for that resource (ie don't generate any
# code) an empty string in settings[1..] can indicate to use the default
# setting, or ignore
#
# each function returns either an empty string, if its parameters are not
# complete (as may often be the case at the boundaries of bind sites or gene
# coding regions), or a string of the form:
#	resource-type "=" resource-details
# where resource-type is one of: TF, jbits, SliceRAM, LUT, LUTIncrFN, or
#	connect (which is not a resource, but specifies non-local resource)
# resource-details for connect is in the form of: resource-type,details
#    details contains the real resource-details and is in the format
#    given by the appropriate resource-type given below, but with the CLB or
#    slice details prepended with row-offset "," col-offset ","
# and resource-details for TF is in the form of:
#	tf-type,spreadfromsrc,bind-seq
# and for SliceRAM is in the form of:
#   slice0class,bitsconst1,bitsconst2,../slice1class,bitsconst1,bitsconst2,..
# and for jbits, LUT, LUTIncrFN is in the form of:
#	bitslice0 "," valslice0 "/" bitslice1 "," valslice1, or
#	bitsclb "," valclb
# bitslice[0/1] is a slice specific constant defined in a class within the
#	  package com.xilinx.JBits.Virtex.Bits, for eg S0G4.S0G4
# bitsclb is a non-slice constant (eg OutMuxToSingle.OUT4_TO_SINGLE_NORTH12)
# valslice[0/1] is a constant defined within the com.xilinx.JBits.Virtex.Bits
#	  package for a specific slice, for eg S0G4.OUT_EAST6
# valclb  will be either a Virtex.Bits constant, such as OutMuxToSingle.ON,
#	  for a jbits resource-type, a 16-bit binary digit for a LUT, or an
#	  expression in the form of: set "," op "," lines; for a LUTIncrFN




# genbits_TF
#   takes:
#	attr:		TF type (local, morphogen, or cytoplasm)
#	settings[0]:	spread from source, or "-" for at source
#	settings[1]:	binding sequence
#   returns:
#	bitsval:	a string describing the TF, in the format:
#				TF=tf-type,spreadfromsrc,bind-seq
#			or empty if incomplete TF

sub conv2jbits_TF {
  my ($attr, @settings) = @_;
  my ($spread,$seq);
  my $bitsval="";

  if ($attr ne "" && $#settings>=1) {		# ignore incomplete TFs
    $spread=$settings[0];
    # if it's a local TF, then change spread from "-" to ""
    # "-" was just used to ensure that TF had no empty settings that would
    # be viewed as being an incompletely processed gene product
    if ($spread eq "-") { $spread=""; }
    $seq=$settings[1];
    $bitsval="TF=" . join(",",$attr,$spread,$seq);
  }

  $bitsval;
}



# conv2jbits_SliceIn:
#   takes:
#	attr:		the slice LUT or Ctrl input - eg F1, or BY, which
#			may be prepended with "connect_" if it is a
#			connecting resource (queried from another CLB)
#	settings[0]:	the input line - an integer from 0 to 27,
#			indicating chosen line, with 0 for input OFF,
#			and "" for ignore/no change
#   returns:
#	bitsval:	a string containing JBits resource & setting
#			constants, or empty if no line selected. in format:
#			jbits=S0details/S1details, or
#			connect=jbits,rowoffset,coloffset,S0details/
#				      rowoffset,coloffset,S1details
#			details are in format: bits-constname,value-constname

sub conv2jbits_SliceIn {
  my ($attr, @settings) = @_;
  my ($lineno,$nlines);
  my ($line0,$line1,$line2,$line3);
  my ($offset0,$offset1,$offset2,$offset3);
  my $bitsval;

  my %toslim = (
  	BY => "G",
	BX => "F",
	SR => "G",
	CE => "F",
	CLK => "",
	TS => ""
     );

  my %jtable = (
	S0G4 => [ "OFF", "SINGLE_EAST4", "SINGLE_NORTH7", "SINGLE_SOUTH18", "SINGLE_WEST11" ],
	S0F4 => [ "OFF", "SINGLE_EAST19", "SINGLE_NORTH3", "SINGLE_SOUTH9", "SINGLE_WEST3" ],
	S1G1 => [ "OFF", "SINGLE_EAST22", "SINGLE_NORTH10", "SINGLE_SOUTH8", "-" ],
	S1F1 => [ "OFF", "SINGLE_EAST16", "SINGLE_NORTH5", "SINGLE_SOUTH2", "SINGLE_WEST14" ]
	);

  # as these resources are the _connecting_ resources, the offset is the
  # inverse of the direction indicated (eg EAST becomes WEST on querying CLB)
  # so, offset from querying CLB is N => -1,0; S => 1,0; E => 0,-1; W => 0,1
  # 0,0 indicates local (or OFF)
  my %connect_offsets = (
	S0G4 => [ "0,0", "0,-1", "-1,0", "1,0", "0,1" ],
	S0F4 => [ "0,0", "0,-1", "-1,0", "1,0", "0,1" ],
	S1G1 => [ "0,0", "0,-1", "-1,0", "1,0", "0,0" ],
	S1F1 => [ "0,0", "0,-1", "-1,0", "1,0", "0,1" ]
	);

  my $connect=($attr=~s/^connect_//) ? "connect" : "";

  # we only use S0G4,S0F4,S1F1,S1G1
  if (!($attr=~/^[FG]/)) {
    $attr=$toslim{$attr};
  } else {
    $attr=substr($attr,0,1);
  }

  # we ignore the attribute, except as an indicator of whether to proceed
  if ($attr ne "" && $#settings>=0) { # else no changes - no line selected
    $lineno=$settings[0];
    # get the line, wrap around if lineno greater than available lines
    $nlines=$#{$jtable{"S0G4"}}+1;
    $line0=$jtable{"S0G4"}->[$lineno % $nlines];
    $offset0=($connect ne "")?$connect_offsets{"S0G4"}->[$lineno % $nlines]:"";
    $line0="S0G4.S0G4,S0G4.$line0";

    $nlines=$#{$jtable{"S0F4"}}+1;
    $line1=$jtable{"S0F4"}->[$lineno % $nlines];
    $offset1=($connect ne "")?$connect_offsets{"S0F4"}->[$lineno % $nlines]:"";
    $line1="S0F4.S0F4,S0F4.$line1";

    $nlines=$#{$jtable{"S1G1"}}+1;
    $line2=$jtable{"S1G1"}->[$lineno % $nlines];
    $offset2=($connect ne "")?$connect_offsets{"S1G1"}->[$lineno % $nlines]:"";
    if ($line2 ne "-") { $line2="S1G1.S1G1,S1G1.$line2"; }
    # note use of "-" to indicate non-existent resource,
    # and it's offset should be "0,0"

    $nlines=$#{$jtable{"S1F1"}}+1;
    $line3=$jtable{"S1F1"}->[$lineno % $nlines];
    $offset3=($connect ne "")?$connect_offsets{"S1F1"}->[$lineno % $nlines]:"";
    $line3="S1F1.S1F1,S1F1.$line3";

    # as its a LE-based resource, it will always result in LE-specific
    # return values

    if ($connect eq "") {
      $bitsval="jbits=$line0/$line1/$line2/$line3";
    } else {
      $bitsval="connect=jbits,$offset0,$line0/$offset1,$line1/" .
	                     "$offset2,$line2/$offset3,$line3";
    }

  }

  $bitsval;
}




# conv2jbits_SliceToOut:
#   takes:
#	attr:		the output bus line (OUT0-OUT7), an integer 0 - 7
#	settings[0]:	the slice output - an integer from 0 to 7,
#			indicating chosen line, with 0 for input OFF,
#			input 7=NOP (reserved for later use for TBUF_OUT),
#			and "" for ignore/no change
#   returns:
#	bitsval:	a string containing JBits resource & setting
#			constants, or empty if no line selected. in format:
#				jbits=bits-const-name,value-const-name

sub conv2jbits_SliceToOut {
  my ($attr, @settings) = @_;
  my ($lineno);
  my $bitsval="";

  if ($attr ne "" && $#settings>=0) {	# else no changes - no line selected
    $lineno=$settings[0];
    # note that as its a slice-based resource, it will always result in
    # slice-specific return values
    # because here we don't know what LE is being set, and as we have
    # defined specific slice-LE outputs to go to particular OUT lines, we
    # ignore the lineno (unless it is OFF) and just use the attribute (the
    # bus line) and set the appropriate slice output to connect to that
    # line, but for the other LE's settings, we use the equivalent
    # other-LE's output, but connect it to the predetermined bus line.
    # the predetermined lines are:
    #		out0,1 connect S0_YQ, or OFF
    #		out2,5 connect S0_XQ, or OFF
    #		out4,6 connect S1_YQ, or OFF
    #		out3,7 connect S1_XQ, or OFF
    if ($attr==0 || $attr==2 || $attr==4 || $attr==3) {
      if ($lineno==0) { 
        $bitsval="jbits=OUT0.OUT0,OUT0.OFF/OUT2.OUT2,OUT2.OFF/" .
	               "OUT4.OUT4,OUT4.OFF/OUT3.OUT3,OUT3.OFF";
       } elsif ($lineno<7) {
        $bitsval="jbits=OUT0.OUT0,OUT0.S0_YQ/OUT2.OUT2,OUT2.S0_XQ/" .
	               "OUT4.OUT4,OUT4.S1_YQ/OUT3.OUT3,OUT3.S1_XQ";
       } # else line is NOP so ignore
    } else { # ($attr==1 || $attr==5 || $attr==6 || $attr==7)
      if ($lineno==0) { 
        $bitsval="jbits=OUT1.OUT1,OUT1.OFF/OUT5.OUT5,OUT5.OFF/" .
                       "OUT6.OUT6,OUT6.OFF/OUT7.OUT7,OUT7.OFF";
       } elsif ($lineno<7) {
        $bitsval="jbits=OUT1.OUT1,OUT1.S0_YQ/OUT5.OUT5,OUT5.S0_XQ/" .
                       "OUT6.OUT6,OUT6.S1_YQ/OUT7.OUT7,OUT7.S1_XQ";
       } # else line is NOP so ignore
    }
  }

  $bitsval;
}



# conv2jbits_OutToSingleBus:
#   takes:
#	attr:		the output bus line (OUT0-OUT7), an integer 0 - 7
#			may be prepended with "connect_" if it is a
#			connecting resource (queried from another CLB)
#	settings[0]:	to single: integer 1-6, indicating chosen line
#			and "" for ignore/no change
#	settings[1]:	setting: 0 or 1, indicating line OFF or ON
#			or "" indicating default - here we default to ON
#
#   returns:
#	bitsval:	a string containing JBits resource & setting
#			constants, or empty if no line selected. in format:
#			jbits=S0details/S1details, or
#			connect=jbits,rowoffset,coloffset,S0details/
#				      rowoffset,coloffset,S1details
#			details is in form: bits-constname,value-constname

sub conv2jbits_OutToSingleBus {
  my ($attr, @settings) = @_;
  my ($nlines,$lineno,$onoff);
  my ($single0g,$single0f,$single1g,$single1f);
  my ($jattr0g,$bits0g,$val0g,$jattr1g,$bits1g,$val1g);
  my ($jattr0f,$bits0f,$val0f,$jattr1f,$bits1f,$val1f);
  my ($off0g,$off0f,$off1g,$off1f);
  my $bitsval="";
  my $DEFAULT_ON_OFF="ON";	# change default here if needed
  my %onofftable = ( 0 => "OFF", 1 => "ON" );
  my %jtable = (
	OUT0 =>	[ "SINGLE_SOUTH3" ],
	OUT1 =>	[ "SINGLE_EAST3", "SINGLE_NORTH2", "SINGLE_WEST4" ],
	OUT2 =>	[ "SINGLE_NORTH8", "SINGLE_SOUTH5", "SINGLE_SOUTH7" ],
	OUT3 =>	[ "SINGLE_EAST11", "SINGLE_NORTH9", "SINGLE_SOUTH10"],
	OUT4 =>	[ "SINGLE_EAST14", "SINGLE_WEST19" ],
	OUT5 =>	[ "SINGLE_WEST16" ],
	OUT6 =>	[ "SINGLE_NORTH18" ],
	OUT7 =>	[ "SINGLE_WEST22" ]
	);

  # as these resources are the _connecting_ resources, the offset is the
  # inverse of the direction indicated (eg EAST becomes WEST on querying CLB)
  # so, offset from querying CLB is N => -1,0; S => 1,0; E => 0,-1; W => 0,1
  my %connect_offsets = (
	OUT0 =>	[ "1,0" ],
	OUT1 =>	[ "0,-1", "-1,0", "0,1" ],
	OUT2 =>	[ "-1,0", "1,0", "1,0" ],
	OUT3 =>	[ "0,-1", "-1,0", "1,0" ],
	OUT4 =>	[ "0,-1", "0,1" ],
	OUT5 =>	[ "0,1" ],
	OUT6 =>	[ "-1,0" ],
	OUT7 =>	[ "0,1" ]
	);

  my $connect=($attr=~s/^connect_//) ? "connect" : "";


  # out lines 0,1 are used by S0-GY
  # out lines 2,5 are used by S0-FX
  # out lines 4,6 are used by S1-GY
  # out lines 3,7 are used by S1-FX
  my %tos0gy=( 0 => 0, 1 => 1, 2 => 0, 5 => 1, 4 => 0, 6 => 1, 3 => 0, 7 => 1 );
  my %tos0fx=( 0 => 2, 1 => 5, 2 => 2, 5 => 5, 4 => 2, 6 => 5, 3 => 2, 7 => 5 );
  my %tos1gy=( 4 => 4, 6 => 6, 3 => 4, 7 => 6, 0 => 4, 1 => 6, 2 => 4, 5 => 6 );
  my %tos1fx=( 4 => 3, 6 => 7, 3 => 3, 7 => 7, 0 => 3, 1 => 7, 2 => 3, 5 => 7 );

  if ($#settings<0) { $settings[0]=""; }	# no changes - no line selected
  if ($#settings<1) { $settings[1]=""; }	# use default ON/OFF setting

  $lineno=$settings[0];
  $onoff=($settings[1] ne "") ? $onofftable{$settings[1]} : $DEFAULT_ON_OFF;

  if ($lineno ne "") {

    # map to appropriate out bus line according to logic element
    $jattr0g="OUT" . $tos0gy{$attr};
    $jattr0f="OUT" . $tos0fx{$attr};
    $jattr1g="OUT" . $tos1gy{$attr};
    $jattr1f="OUT" . $tos1fx{$attr};

    # ensure that within legal range for line choice
    $nlines=$#{$jtable{$jattr0g}}+1;
    $single0g=$jtable{$jattr0g}->[($lineno-1) % $nlines];
    $off0g=($connect ne "")?$connect_offsets{$jattr0g}->[($lineno-1) % $nlines]:"";
    $nlines=$#{$jtable{$jattr0f}}+1;
    $single0f=$jtable{$jattr0f}->[($lineno-1) % $nlines];
    $off0f=($connect ne "")?$connect_offsets{$jattr0f}->[($lineno-1) % $nlines]:"";
    $nlines=$#{$jtable{$jattr1g}}+1;
    $single1g=$jtable{$jattr1g}->[($lineno-1) % $nlines];
    $off1g=($connect ne "")?$connect_offsets{$jattr1g}->[($lineno-1) % $nlines]:"";
    $nlines=$#{$jtable{$jattr1f}}+1;
    $single1f=$jtable{$jattr1f}->[($lineno-1) % $nlines];
    $off1f=($connect ne "")?$connect_offsets{$jattr1f}->[($lineno-1) % $nlines]:"";

    if ($single0g ne "") { 
      $bits0g="OutMuxToSingle." . $jattr0g . "_TO_" . $single0g;
      $val0g="OutMuxToSingle." . $onoff;
    }
    if ($single0f ne "") { 
      $bits0f="OutMuxToSingle." . $jattr0f . "_TO_" . $single0f;
      $val0f="OutMuxToSingle." . $onoff;
    }
    if ($single1g ne "") { 
      $bits1g="OutMuxToSingle." . $jattr1g . "_TO_" . $single1g;
      $val1g="OutMuxToSingle." . $onoff;
    }
    if ($single1f ne "") { 
      $bits1f="OutMuxToSingle." . $jattr1f . "_TO_" . $single1f;
      $val1f="OutMuxToSingle." . $onoff;
    }
    # eg OutMuxToSingle.OUT1_TO_SINGLE_WEST5,OutMuxToSingle.ON


    if ($connect eq "") {
    $bitsval="jbits=$bits0g,$val0g/$bits0f,$val0f/" .
                   "$bits1g,$val1g/$bits1f,$val1f";
    } else {
      $bitsval="connect=jbits,$off0g,$bits0g,$val0g/" .
      		             "$off0f,$bits0f,$val0f/" .
                             "$off1g,$bits1g,$val1g/" .
			     "$off1f,$bits1f,$val1f";
    }
  }

  $bitsval;
}




# conv2jbits_OutToSingleDir:
#   takes:
#	attr:		connecting single's output direction (E,N,S,W)
#			may be prepended with "connect_" if it is a
#			connecting resource (queried from another CLB)
#	settings[0]:	line: integer 1-12, indicating chosen outbus-single
#			line and "" for ignore/no change
#	settings[1]:	setting: 0 or 1, indicating line OFF or ON
#			or "" indicating default - here we default to ON
#
#   returns:
#	bitsval:	a string containing JBits resource & setting
#			constants, or empty if no line selected. in format:
#			jbits=S0details/S1details, or
#			connect=jbits,rowoffset,coloffset,S0details/
#				      rowoffset,coloffset,S1details
#			details is in form: bits-constname,value-constname
#			note use of "-" to indicate an LE-granularity resource
#			is not available for that LE

sub conv2jbits_OutToSingleDir {
  my ($attr, @settings) = @_;
  my ($nlines,$lineno,$onoff,$single);
  my ($single0g,$single0f,$single1g,$single1f);
  my ($jattr0g,$bitsval0g,$jattr1g,$bitsval1g);
  my ($jattr0f,$bitsval0f,$jattr1f,$bitsval1f);
  my ($jattr);
  my $bitsval="";
  my $DEFAULT_ON_OFF="ON";	# change default here if needed
  my %onofftable = ( 0 => "OFF", 1 => "ON" );
  my %dirtable = (
  	E => "EAST",
	W => "WEST",
	N => "NORTH",
	S => "SOUTH"
	);

  # out lines 0,1 are used by S0-GY
  my %j0gtable = (
	EAST => [ "OUT1_TO_SINGLE_EAST3" ],
	NORTH => [ "OUT1_TO_SINGLE_NORTH2" ],
	SOUTH => [ "OUT0_TO_SINGLE_SOUTH3" ],
	WEST => [ "OUT1_TO_SINGLE_WEST4" ]
	);

  # out lines 2,5 are used by S0-FX
  my %j0ftable = (
	EAST => [ "-" ],
	NORTH => [ "OUT2_TO_SINGLE_NORTH8" ],
	SOUTH => [ "OUT2_TO_SINGLE_SOUTH5", "OUT2_TO_SINGLE_SOUTH7" ],
	WEST => [ "OUT5_TO_SINGLE_WEST16" ]
	);

  # out lines 4,6 are used by S1-GY
  my %j1gtable = (
	EAST => [ "OUT4_TO_SINGLE_EAST14" ],
	NORTH => [ "OUT6_TO_SINGLE_NORTH18" ],
	SOUTH => [ "-" ],
	WEST => [ "OUT4_TO_SINGLE_WEST19" ]
	);

  # out lines 3,7 are used by S1-FX
  my %j1ftable = (
	EAST => [ "OUT3_TO_SINGLE_EAST11" ],
	NORTH => [ "OUT3_TO_SINGLE_NORTH9" ],
	SOUTH => [ "OUT3_TO_SINGLE_SOUTH10" ],
	WEST => [ "OUT7_TO_SINGLE_WEST22" ]
	);

  # as these resources are the _connecting_ resources, the offset is the
  # inverse of the direction indicated (eg EAST becomes WEST on querying CLB)
  # so, offset from querying CLB is N => -1,0; S => 1,0; E => 0,-1; W => 0,1
  my %connect_offs0g = (
	EAST => [ "0,-1" ],
	NORTH => [ "-1,0" ],
	SOUTH => [ "1,0" ],
	WEST => [ "0,1" ]
  	);
  my %connect_offs0f = (
	EAST => [ "0,0" ],
	NORTH => [ "-1,0" ],
	SOUTH => [ "1,0", "1,0" ],
	WEST => [ "0,1" ]
  	);
  my %connect_offs1g = (
	EAST => [ "0,-1" ],
	NORTH => [ "-1,0" ],
	SOUTH => [ "0,0" ],
	WEST => [ "0,1" ]
  	);
  my %connect_offs1f = (
	EAST => [ "0,-1" ],
	NORTH => [ "-1,0" ],
	SOUTH => [ "1,0" ],
	WEST => [ "0,1" ]
  	);

  my $connect=($attr=~s/^connect_//) ? "connect" : "";



  if ($#settings<0) { $settings[0]=""; }	# no changes - no line selected
  if ($#settings<1) { $settings[1]=""; }	# use default ON/OFF setting

  $lineno=$settings[0];
  $onoff=($settings[1] ne "") ? $onofftable{$settings[1]} : $DEFAULT_ON_OFF;

  if ($lineno ne "") {
    $jattr=$dirtable{$attr};

    # ensure that within legal range for line choice
    $nlines=$#{$j0gtable{$jattr}}+1;
    $single0g=$j0gtable{$jattr}->[($lineno-1) % $nlines];
    $off0g=($connect ne "")?$connect_offs0g{$jattr}->[($lineno-1) % $nlines]:"";
    $nlines=$#{$j0ftable{$jattr}}+1;
    $single0f=$j0ftable{$jattr}->[($lineno-1) % $nlines];
    $off0f=($connect ne "")?$connect_offs0f{$jattr}->[($lineno-1) % $nlines]:"";
    $nlines=$#{$j1gtable{$jattr}}+1;
    $single1g=$j1gtable{$jattr}->[($lineno-1) % $nlines];
    $off1g=($connect ne "")?$connect_offs1g{$jattr}->[($lineno-1) % $nlines]:"";
    $nlines=$#{$j1ftable{$jattr}}+1;
    $single1f=$j1ftable{$jattr}->[($lineno-1) % $nlines];
    $off1f=($connect ne "")?$connect_offs1f{$jattr}->[($lineno-1) % $nlines]:"";

    $bitsval0g="OutMuxToSingle." . $single0g . ",OutMuxToSingle." . $onoff;
    if ($single0f ne "-") {
      $bitsval0f="OutMuxToSingle." . $single0f . ",OutMuxToSingle." . $onoff;
    } else {
      $bitsval0f="-";
    }
    if ($single1g ne "-") {
      $bitsval1g="OutMuxToSingle." . $single1g . ",OutMuxToSingle." . $onoff;
    } else {
      $bitsval1g="-";
    }
    $bitsval1f="OutMuxToSingle." . $single1f . ",OutMuxToSingle." . $onoff;
    # eg OutMuxToSingle.OUT1_TO_SINGLE_WEST5,OutMuxToSingle.ON 

    if ($connect eq "") {
      $bitsval="jbits=$bitsval0g/$bitsval0f/$bitsval1g/$bitsval1f";
    } else {
      $bitsval="connect=jbits,$off0g,$bitsval0g/$off0f,$bitsval0f/" .
      			     "$off1g,$bitsval1g/$off1f,$bitsval1f";
    }
  }

  $bitsval;
}




# conv2jbits_SliceRAM:
#   takes:
#	attr:		dual mode: DUAL_OFF or DUAL_ON
#	settings[0]:	setting: one of LUT, RAM, SHIFT, 32X1
#			and "" for ignore/no change
#
#   returns:
#	bitsval:	a string containing JBits class name (slice dependent)
#			and the bits constants to be set to ON, all the other
#			bits need to be turned OFF by the JBits code. the
#			return format is:
#			  SliceRAM=class-prefix,on-bits1,on-bits2,..

sub conv2jbits_SliceRAM {
  my ($attr, @settings) = @_;
  my $classbits;

  # we don't use SliceRAM in this slimmed down model
  $classbits="";
}


# conv2jbits_LUTBitFN:
#   takes:
#	attr:		the LUT being set (F or G)
#	settings[0]:	binary string (upto 16 bits), which is the fn setting
#			or "" indicating ignore - no change
#
#   returns:
#	bitsval:	a string containing JBits resource & setting
#			constants, or empty if incomplete. in format:
#				LUT=bits-const-name,LUT-setting
#
#   Notes:		may be less than 16 bits, if so, then ignore
#			also note that truth table inputs are ordered as
#			L4,L3,L2,L1, and not L1,L2,L3,L4; and LUT config
#			arrays are loaded LSB

sub conv2jbits_LUTBitFN {
  my ($attr, @settings) = @_;
  my ($binstr,$bits0G,$bits0F,$bits1G,$bits1F,$val0,$val1);
  my $bitsval="";

  if ($#settings<0) { $settings[0]=""; }
  $binstr=$settings[0];

  if ($attr ne "" && length($binstr)==16) { # need full 16 bit config
    # we ignore the attribute, as only 1 LUT per LE
    # only the bits is slice-specific
    $bits0G="LUT.SLICE0_G";
    $bits0F="LUT.SLICE0_F";
    $bits1G="LUT.SLICE1_G";
    $bits1F="LUT.SLICE1_F";
 
    # when using a singleinput line:
    #	F1/G1 only: LUT out = in    = 0101010101010101
    #		        or inverted = 1010101010101010
    #	F4/G4 only: LUT out = in    = 0000000011111111
    #		        or inverted = 1111111100000000
    #   any LUT:    LUT out = 0     = 0000000000000000
    #                   or inverted = 1111111111111111
    # so for any LUT there are 4 available FN's, 0,1, in-out, in-invertout
    # we can just check the 1st 2 bits of the evolved bitstream, and then
    # fill in the rest of the relevant sequence to match above

    if (substr($binstr,0,2) eq "00") {
      $val0=$val1="0000000000000000";	# LUT out is always 0
    } elsif (substr($binstr,0,2) eq "11") {
      $val0=$val1="1111111111111111";	# LUT out is always 1
    } else {
      # slice 0 uses F4/G4
      $val0=(substr($binstr,0,1) eq "0")?"0000000011111111":"1111111100000000";
      # slice 1 uses F1/G1
      $val1=(substr($binstr,0,1) eq "0")?"0101010101010101":"1010101010101010";
    }

    $val0=~tr/01/10/;			# need to be inverted to store
    $val1=~tr/01/10/;			# need to be inverted to store

    $bitsval="LUT=$bits0G,$val0/$bits0F,$val0/$bits1G,$val1/$bits1F,$val1";
  }

  $bitsval;
}




# conv2jbits_LUTIncrFN:
#   takes:
#	attr:		the LUT being set (F or G)
#	settings[0]:	set: how to combine this function with pre-existing
#			     LUT fn - one of: "SET","OR","XOR","AND"
#	settings[1]:	op: boolean operation to apply to selected lines,
#			    one of: AND,OR,XOR,XNOR,NAND,NOR,MJR0,MJR1
#	settings[2]:	lines: 4 char string indicating lines involved in fn
#			       0's indicate inverted line, 1's uninverted
#			       input, and -'s for line not used in fn
#
#   returns:
#	bitsval:	a string containing JBits resource constant and LUT
#			incremental fn, or empty if incomplete. in format:
#				LUTIncrFN=bits-const-name,set,op,lines
#
#   Notes:		if any of settings[0,1,2] is "", this indicates
#			ignore - no change

sub conv2jbits_LUTIncrFN {
  my ($attr, @settings) = @_;
  my ($set,$op,$lines);
  my ($bits0G,$bits0F,$bits1G,$bits1F,$val0,$val1);
  my $bitsval="";

  # we don't use LUTIncrFN in this slimmed down model

  $bitsval;
}





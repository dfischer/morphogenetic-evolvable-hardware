
# this configuration file is for logic element granularity EHW with only
# synchronous outputs (to use with Virtex DS simulator), no control lines,
# and no slice RAM configuration. All direct LUT connecting single lines
# (and direct connecting neighbour's OUT lines), all LUT configurations,
# incremental and active LUT functions are provided.
#
#	modified from legranslimconvToJBits.conf & VirtexDSconvToJBits.conf
#			J.A. Lee, April 2004
#		added support for ActiveLUTFNs August 2004
#
#	fixed conv2jbits_SliceToOut() to be LE granularity, Dec 2005

#
#		     modified from slimconvToJBits.conf
#			J.A. Lee, February 2003
#		added support for "connect"-ing (non-local) resources
#		to SliceIn, OutToSingleBus, OutToSingleDir decode fn's
#				March 2004

# this file is a slimmed down version, with limited resources and resource
# settings, to facilitate rapid circuit evaluation by tracing connections
# rather than needing to use the simulator, and to simplify the task for
# evolution to solve, while allowing the solutions to be used as starting
# points for evolving circuits that use all the available CLB resources and
# connections.
#
#			modified from convToJBits.conf
#			J.A. Lee, February 2003

# configuration file, containing scripts for conversion from Virtex-Resource,
# Atrribute, Setting number format (as generated from decoding a chromosome
# according to the Virtex genetic code) to JBits bits and value constants.
#
#                   	adapted from ResourceToJBits.conf
#			J.A. Lee, December 2003
#
# This file contains all the scripts necessary for converting from resource,
# attribute, setting number format to the equivalent JBits constants. As such,
# each resource type should have an associated conv2jbits_RESOURCENAME
# function defined here, which takes parameters:
#	attr, settings.
# The 'attr' and 'settings' parameters are the attribute and settings that
# are returned from their associated genetic table's decode_RESOURCENAME
# function. An empty string in settings[0] should be taken as indicating no
# change to the current settings for that resource (ie don't generate any
# code) an empty string in settings[1..] can indicate to use the default
# setting, or ignore
#
# each function returns either an empty string, if its parameters are not
# complete (as may often be the case at the boundaries of bind sites or gene
# coding regions), or a string of the form:
#	resource-type "=" resource-details
# where resource-type is one of: TF, jbits, SliceRAM, LUT, LUTIncrFN, or
#	connect (which is not a resource, but specifies non-local resource)
# resource-details for connect is in the form of: resource-type,details
#    details contains the real resource-details and is in the format
#    given by the appropriate resource-type given below, but with the CLB or
#    slice details prepended with row-offset "," col-offset ","
# and resource-details for TF is in the form of:
#	tf-type,spreadfromsrc,bind-seq
# and for SliceRAM is in the form of:
#   slice0class,bitsconst1,bitsconst2,../slice1class,bitsconst1,bitsconst2,..
# and for jbits, LUT, LUTIncrFN is in the form of:
#	bitslice0 "," valslice0 "/" bitslice1 "," valslice1, or
#	bitsclb "," valclb
# bitslice[0/1] is a slice specific constant defined in a class within the
#	  package com.xilinx.JBits.Virtex.Bits, for eg S0G4.S0G4
# bitsclb is a non-slice constant (eg OutMuxToSingle.OUT4_TO_SINGLE_NORTH12)
# valslice[0/1] is a constant defined within the com.xilinx.JBits.Virtex.Bits
#	  package for a specific slice, for eg S0G4.OUT_EAST6
# valclb  will be either a Virtex.Bits constant, such as OutMuxToSingle.ON,
#	  for a jbits resource-type, a 16-bit binary digit for a LUT, or an
#	  expression in the form of: set "," op "," lines; for a LUTIncrFN




# genbits_TF
#   takes:
#	attr:		TF type (local, morphogen, or cytoplasm)
#	settings[0]:	spread from source, or "-" for at source
#	settings[1]:	binding sequence
#   returns:
#	bitsval:	a string describing the TF, in the format:
#				TF=tf-type,spreadfromsrc,bind-seq
#			or empty if incomplete TF

sub conv2jbits_TF {
  my ($attr, @settings) = @_;
  my ($spread,$seq);
  my $bitsval="";

  if ($attr ne "" && $#settings>=1) {		# ignore incomplete TFs
    $spread=$settings[0];
    # if it's a local TF, then change spread from "-" to ""
    # "-" was just used to ensure that TF had no empty settings that would
    # be viewed as being an incompletely processed gene product
    if ($spread eq "-") { $spread=""; }
    $seq=$settings[1];
    $bitsval="TF=" . join(",",$attr,$spread,$seq);
  }

  $bitsval;
}



# conv2jbits_SliceIn:
#   takes:
#	attr:		the slice LUT or Ctrl input - eg F1, or BY, which
#			may be prepended with "connect_" if it is a
#			connecting resource (queried from another CLB)
#	settings[0]:	the input line - an integer from 0 to 27,
#			indicating chosen line, with 0 for input OFF,
#			and "" for ignore/no change
#   returns:
#	bitsval:	a string containing JBits resource & setting
#			constants, or empty if no line selected. in format:
#				jbits=S0G/S0F/S1G/S1F
#			  or
#				connect=jbits,rowoffset,coloffset,S0G/
#				      rowoffset,coloffset,S0F/
#				      rowoffset,coloffset,S1G/
#				      rowoffset,coloffset,S1F
#			with each of these LE settings in the format:
#				bits-const-name,value-const-name

sub conv2jbits_SliceIn {
  my ($attr, @settings) = @_;
  my ($lineno,$nlines);
  my ($res0,$res1,$res2,$res3);
  my ($line0,$line1,$line2,$line3);
  my ($offset0,$offset1,$offset2,$offset3);
  my $bitsval;

  # we only use LUT lines, we map everything else to these
  my %toLE = (
  	G1 => "1",
  	G2 => "2",
  	G3 => "3",
  	G4 => "4",
  	F1 => "1",
  	F2 => "2",
  	F3 => "3",
  	F4 => "4",
  	BY => "1",
	BX => "2",
	SR => "3",
	CE => "4",
	CLK => "",
	TS => ""
     );

  my %jtable = (
	S0G1 => [ "OFF", "OFF", "OUT_WEST1", "SINGLE_NORTH15", "SINGLE_SOUTH6", "SINGLE_WEST5", "SINGLE_NORTH19", "SINGLE_SOUTH12", "SINGLE_WEST17", "SINGLE_NORTH22", "SINGLE_SOUTH13", "SINGLE_WEST18", "SINGLE_SOUTH21" ],
	S0G2 => [ "OFF", "OFF", "OUT_WEST0", "SINGLE_EAST11", "SINGLE_NORTH12", "SINGLE_SOUTH1", "SINGLE_WEST2", "SINGLE_EAST23", "SINGLE_NORTH17", "SINGLE_WEST20"],
	S0G3 => [ "OFF", "OUT_EAST7", "SINGLE_EAST5", "SINGLE_NORTH13", "SINGLE_SOUTH0", "SINGLE_WEST6", "SINGLE_EAST7", "SINGLE_SOUTH14", "SINGLE_WEST8", "SINGLE_EAST9", "SINGLE_SOUTH20", "SINGLE_WEST15", "SINGLE_EAST10", "SINGLE_WEST23", "SINGLE_EAST21"],
	S0G4 => [ "OFF", "OFF", "OUT_EAST6", "SINGLE_EAST4", "SINGLE_NORTH0", "SINGLE_SOUTH2", "SINGLE_WEST3", "SINGLE_EAST16", "SINGLE_NORTH1", "SINGLE_SOUTH8", "SINGLE_WEST11", "SINGLE_EAST17", "SINGLE_NORTH3", "SINGLE_SOUTH9", "SINGLE_WEST14", "SINGLE_EAST19", "SINGLE_NORTH5", "SINGLE_SOUTH18", "SINGLE_EAST22", "SINGLE_NORTH7", "SINGLE_NORTH10"],

	S0F1 => [ "OFF", "OFF", "OUT_WEST1", "SINGLE_NORTH15", "SINGLE_SOUTH6", "SINGLE_WEST5", "SINGLE_NORTH19", "SINGLE_SOUTH12", "SINGLE_WEST17", "SINGLE_NORTH22", "SINGLE_SOUTH13", "SINGLE_WEST18", "SINGLE_SOUTH21" ] ,
	S0F2 => [ "OFF", "OFF", "OUT_WEST0", "SINGLE_EAST11", "SINGLE_NORTH12", "SINGLE_SOUTH1", "SINGLE_WEST2", "SINGLE_EAST23", "SINGLE_NORTH17", "SINGLE_WEST20" ],
	S0F3 => [ "OFF", "OFF", "OUT_EAST7", "SINGLE_EAST5", "SINGLE_NORTH13", "SINGLE_SOUTH0", "SINGLE_WEST6", "SINGLE_EAST7", "SINGLE_SOUTH14", "SINGLE_WEST8", "SINGLE_EAST9", "SINGLE_SOUTH20", "SINGLE_WEST15", "SINGLE_EAST10", "SINGLE_WEST23", "SINGLE_EAST21"],
	S0F4 => [ "OFF", "OUT_EAST6", "SINGLE_EAST4", "SINGLE_NORTH0", "SINGLE_SOUTH2", "SINGLE_WEST3", "SINGLE_EAST16", "SINGLE_NORTH1", "SINGLE_SOUTH8", "SINGLE_WEST11", "SINGLE_EAST17", "SINGLE_NORTH3", "SINGLE_SOUTH9", "SINGLE_WEST14", "SINGLE_EAST19", "SINGLE_NORTH5", "SINGLE_SOUTH18", "SINGLE_EAST22", "SINGLE_NORTH7", "SINGLE_NORTH10"],

	S1G1 => [ "OFF", "OFF", "OUT_EAST6", "SINGLE_EAST4", "SINGLE_NORTH0", "SINGLE_SOUTH2", "SINGLE_WEST3", "SINGLE_EAST16", "SINGLE_NORTH1", "SINGLE_SOUTH8", "SINGLE_WEST11", "SINGLE_EAST17", "SINGLE_NORTH3", "SINGLE_SOUTH9", "SINGLE_WEST14", "SINGLE_EAST19", "SINGLE_NORTH5", "SINGLE_SOUTH18", "SINGLE_EAST22", "SINGLE_NORTH7", "SINGLE_NORTH10"],
	S1G2 => [ "OFF", "OFF", "OUT_EAST7", "SINGLE_EAST5", "SINGLE_NORTH13", "SINGLE_SOUTH0", "SINGLE_WEST6", "SINGLE_EAST7", "SINGLE_SOUTH14", "SINGLE_WEST8", "SINGLE_EAST9", "SINGLE_SOUTH20", "SINGLE_WEST15", "SINGLE_EAST10", "SINGLE_WEST23", "SINGLE_EAST21"],
	S1G3 => [ "OFF", "OUT_WEST0", "SINGLE_EAST11", "SINGLE_NORTH12", "SINGLE_SOUTH1", "SINGLE_WEST2", "SINGLE_EAST23", "SINGLE_NORTH17", "SINGLE_WEST20"],
	S1G4 => [ "OFF", "OFF", "OUT_WEST1", "SINGLE_NORTH15", "SINGLE_SOUTH6", "SINGLE_WEST5", "SINGLE_NORTH19", "SINGLE_SOUTH12", "SINGLE_WEST17", "SINGLE_NORTH22", "SINGLE_SOUTH13", "SINGLE_WEST18", "SINGLE_SOUTH21"],

	S1F1 => [ "OFF", "OFF", "OUT_EAST6", "SINGLE_EAST4", "SINGLE_NORTH0", "SINGLE_SOUTH2", "SINGLE_WEST3", "SINGLE_EAST16", "SINGLE_NORTH1", "SINGLE_SOUTH8", "SINGLE_WEST11", "SINGLE_EAST17", "SINGLE_NORTH3", "SINGLE_SOUTH9", "SINGLE_WEST14", "SINGLE_EAST19", "SINGLE_NORTH5", "SINGLE_SOUTH18", "SINGLE_EAST22", "SINGLE_NORTH7", "SINGLE_NORTH10"] ,
	S1F2 => [ "OFF", "OFF", "OUT_EAST7", "SINGLE_EAST5", "SINGLE_NORTH13", "SINGLE_SOUTH0", "SINGLE_WEST6", "SINGLE_EAST7", "SINGLE_SOUTH14", "SINGLE_WEST8", "SINGLE_EAST9", "SINGLE_SOUTH20", "SINGLE_WEST15", "SINGLE_EAST10", "SINGLE_WEST23", "SINGLE_EAST21" ],
	S1F3 => [ "OFF", "OFF", "OUT_WEST0", "SINGLE_EAST11", "SINGLE_NORTH12", "SINGLE_SOUTH1", "SINGLE_WEST2", "SINGLE_EAST23", "SINGLE_NORTH17", "SINGLE_WEST20"],
	S1F4 => [ "OFF", "OUT_WEST1", "SINGLE_NORTH15", "SINGLE_SOUTH6", "SINGLE_WEST5", "SINGLE_NORTH19", "SINGLE_SOUTH12", "SINGLE_WEST17", "SINGLE_NORTH22", "SINGLE_SOUTH13", "SINGLE_WEST18", "SINGLE_SOUTH21"]
	);

  # as these resources are the _connecting_ resources, the offset is the
  # inverse of the direction indicated (eg EAST becomes WEST on querying CLB)
  # so, offset from querying CLB is N => -1,0; S => 1,0; E => 0,-1; W => 0,1
  # 0,0 indicates local (or OFF)
  my %connect_offsets = (
	S0G1 => [ "0,0", "0,0", "0,1", "-1,0", "1,0", "0,1", "-1,0", "1,0", "0,1", "-1,0", "1,0", "0,1", "1,0" ],
	S0G2 => [ "0,0", "0,0", "0,1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "-1,0", "0,1"],
	S0G3 => [ "0,0", "0,-1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "1,0", "0,1", "0,-1", "1,0", "0,1", "0,-1", "0,1", "0,-1"],
	S0G4 => [ "0,0", "0,0", "0,-1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "-1,0", "1,0", "0,-1", "-1,0", "-1,0"],

	S0F1 => [ "0,0", "0,0", "0,1", "-1,0", "1,0", "0,1", "-1,0", "1,0", "0,1", "-1,0", "1,0", "0,1", "1,0" ] ,
	S0F2 => [ "0,0", "0,0", "0,1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "-1,0", "0,1" ],
	S0F3 => [ "0,0", "0,0", "0,-1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "1,0", "0,1", "0,-1", "1,0", "0,1", "0,-1", "0,1", "0,-1"],
	S0F4 => [ "0,0", "0,-1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "-1,0", "1,0", "0,-1", "-1,0", "-1,0"],

	S1G1 => [ "0,0", "0,0", "0,-1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "-1,0", "1,0", "0,-1", "-1,0", "-1,0"],
	S1G2 => [ "0,0", "0,0", "0,-1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "1,0", "0,1", "0,-1", "1,0", "0,1", "0,-1", "0,1", "0,-1"],
	S1G3 => [ "0,0", "0,1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "-1,0", "0,1"],
	S1G4 => [ "0,0", "0,0", "0,1", "-1,0", "1,0", "0,1", "-1,0", "1,0", "0,1", "-1,0", "1,0", "0,1", "1,0"],

	S1F1 => [ "0,0", "0,0", "0,-1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "-1,0", "1,0", "0,-1", "-1,0", "-1,0"] ,
	S1F2 => [ "0,0", "0,0", "0,-1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "1,0", "0,1", "0,-1", "1,0", "0,1", "0,-1", "0,1", "0,-1" ],
	S1F3 => [ "0,0", "0,0", "0,1", "0,-1", "-1,0", "1,0", "0,1", "0,-1", "-1,0", "0,1"],
	S1F4 => [ "0,0", "0,1", "-1,0", "1,0", "0,1", "-1,0", "1,0", "0,1", "-1,0", "1,0", "0,1", "1,0"]
	);

  my $connect=($attr=~s/^connect_//) ? "connect" : "";

  # map all the inputs to one of the LUT lines (or nothing for CLK & TS)
  $attr=$toLE{$attr};

  # we use the attribute to indicate which of the LE's lines was selected
  if ($attr ne "" && $#settings>=0) { # else no changes - no line selected
    $lineno=$settings[0];
    # get the line, wrap around if lineno greater than available lines
    if ($attr==1) {
      $res0="S0G1";
      $res1="S0F1";
      $res2="S1G1";
      $res3="S1F1";
    } elsif ($attr==2) {
      $res0="S0G2";
      $res1="S0F2";
      $res2="S1G2";
      $res3="S1F2";
    } elsif ($attr==3) {
      $res0="S0G3";
      $res1="S0F3";
      $res2="S1G3";
      $res3="S1F3";
    } else { # ($attr==4)
      $res0="S0G4";
      $res1="S0F4";
      $res2="S1G4";
      $res3="S1F4";
    }

    $nlines=$#{$jtable{$res0}}+1;
    $line0=$jtable{$res0}->[$lineno % $nlines];
    $offset0=($connect ne "")?$connect_offsets{$res0}->[$lineno % $nlines]:"";

    $nlines=$#{$jtable{$res1}}+1;
    $line1=$jtable{$res1}->[$lineno % $nlines];
    $offset1=($connect ne "")?$connect_offsets{$res1}->[$lineno % $nlines]:"";

    $nlines=$#{$jtable{$res2}}+1;
    $line2=$jtable{$res2}->[$lineno % $nlines];
    $offset2=($connect ne "")?$connect_offsets{$res2}->[$lineno % $nlines]:"";

    $nlines=$#{$jtable{$res3}}+1;
    $line3=$jtable{$res3}->[$lineno % $nlines];
    $offset3=($connect ne "")?$connect_offsets{$res3}->[$lineno % $nlines]:"";

    # as its a LE-based resource, it will always result in LE-specific
    # return values

    if ($connect eq "") {
      $bitsval="jbits=$res0.$res0,$res0.$line0/$res1.$res1,$res1.$line1/" .
                     "$res2.$res2,$res2.$line2/$res3.$res3,$res3.$line3";
    } else {
      $bitsval="connect=jbits,$offset0,$res0.$res0,$res0.$line0/" .
      		             "$offset1,$res1.$res1,$res1.$line1/" .
                             "$offset2,$res2.$res2,$res2.$line2/" .
			     "$offset3,$res3.$res3,$res3.$line3";
    }

  }

  $bitsval;
}



# conv2jbits_SliceToOut:
#   takes:
#	attr:		the output bus line (OUT0-OUT7), an integer 0 - 7
#	settings[0]:	the slice output - an integer from 0 to 7,
#			indicating chosen line, with 0 for input OFF,
#			input 7=NOP (reserved for later use for TBUF_OUT),
#			and "" for ignore/no change
#   returns:
#	bitsval:	a string containing JBits resource & setting
#			constants, or empty if no line selected. in format:
#				jbits=S0G/S0F/S1G/S1F
#			with each of these LE settings in the format:
#				bits-const-name,value-const-name
#
#   Notes:
#	no contention problems, each OUT bus line can only be driven by 1
#	output, and setting it to another, simply changes it to that line

sub conv2jbits_SliceToOut {
  my ($attr, @settings) = @_;
  my ($nlines,$lineno,$line);
  my ($line,$jattr,$bits,$val);
  my ($line0G,$line0F,$line1G,$line1F);
  my ($bits0G,$bits0F,$bits1G,$bits1F,$val0G,$val0F,$val1G,$val1F);
  my $bitsval;

  my %jtable = (
	S0G_OUT => [ "OFF", "S0_Y", "S0_YQ", "S0_YQ", "S0_Y", "S0_YQ", "S0_YQ", "NOP" ],
	S0F_OUT => [ "OFF", "S0_X", "S0_XQ", "S0_XQ", "S0_X", "S0_XQ", "S0_XQ", "NOP" ],
	S1G_OUT => [ "OFF", "S1_Y", "S1_YQ", "S1_YQ", "S1_Y", "S1_YQ", "S1_YQ", "NOP" ],
	S1F_OUT => [ "OFF", "S1_X", "S1_XQ", "S1_XQ", "S1_X", "S1_XQ", "S1_XQ", "NOP" ],
	);


  if ($attr ne "" && $#settings>=0) {	# else no changes - no line selected

    $jattr="OUT" . $attr;			# OUT[0-7]
    $lineno=$settings[0];
    # ensure that within legal range for line choice
    $nlines=$#{$jtable{"S0G_OUT"}}+1;
    $line0G=$jtable{"S0G_OUT"}->[$lineno % $nlines];
    $nlines=$#{$jtable{"S0F_OUT"}}+1;
    $line0F=$jtable{"S0F_OUT"}->[$lineno % $nlines];
    $nlines=$#{$jtable{"S1G_OUT"}}+1;
    $line1G=$jtable{"S1G_OUT"}->[$lineno % $nlines];
    $nlines=$#{$jtable{"S1F_OUT"}}+1;
    $line1F=$jtable{"S1F_OUT"}->[$lineno % $nlines];

    if ($line0G ne "NOP" && $line0F ne "NOP" &&
        $line1G ne "NOP" && $line1F ne "NOP") {	# if a connecting line
      $bits="$jattr.$jattr";			# eg OUT1.OUT1

      # as its a LE-based resource, it will always result in LE-specific
      # return values, although bits are not LE-specified
      $val0G="$jattr.$line0G";			# eg OUT0.S0_YQ
      $val0F="$jattr.$line0F";			# eg OUT0.S0_XQ
      $val1G="$jattr.$line1G";			# eg OUT0.S1_YQ
      $val1F="$jattr.$line1F";			# eg OUT0.S1_XQ
      $bitsval="$bits,$val0G/$bits,$val0F/$bits,$val1G/$bits,$val1F";

      $bitsval="jbits=".$bitsval;
    }
  }

  $bitsval;
}



# conv2jbits_OutToSingleBus:
#   takes:
#	attr:		the output bus line (OUT0-OUT7), an integer 0 - 7
#			may be prepended with "connect_" if it is a
#			connecting resource (queried from another CLB)
#	settings[0]:	to single: integer 1-6, indicating chosen line
#			and "" for ignore/no change
#	settings[1]:	setting: 0 or 1, indicating line OFF or ON
#			or "" indicating default - here we default to ON
#
#   returns:
#	bitsval:	a string containing JBits resource & setting
#			constants, or empty if no line selected. in format:
#				jbits=details
#			or      connect=jbits,rowoffset,coloffset,details
#			details is in form: bits-constname,value-constname
#
#   Notes:
#	contention problems are possible for:
#	  E5/W5 E11/W11 E17/W17 E23/W23 singles between horiz adjacent CLBs
#	  N0/S0 N1/S1   N12/S12 N13/S13 singles between vert adjacent CLBs

sub conv2jbits_OutToSingleBus {
  my ($attr, @settings) = @_;
  my ($nlines,$lineno,$onoff,$single);
  my ($jattr,$bits,$val);
  my $bitsval;
  my $DEFAULT_ON_OFF="ON";	# change default here if needed
  my %onofftable = ( 0 => "OFF", 1 => "ON" );
  my %jtable = (
	OUT0 =>	[ "SINGLE_EAST2", "SINGLE_NORTH0", "SINGLE_NORTH1", "SINGLE_SOUTH1", "SINGLE_SOUTH3", "SINGLE_WEST7" ],
	OUT1 =>	[ "SINGLE_EAST3", "SINGLE_EAST5", "SINGLE_NORTH2", "SINGLE_SOUTH0", "SINGLE_WEST4", "SINGLE_WEST5" ],
	OUT2 =>	[ "SINGLE_EAST6", "SINGLE_NORTH6", "SINGLE_NORTH8", "SINGLE_SOUTH5", "SINGLE_SOUTH7", "SINGLE_WEST9" ],
	OUT3 =>	[ "SINGLE_EAST8", "SINGLE_EAST11", "SINGLE_NORTH9", "SINGLE_SOUTH10", "SINGLE_WEST10", "SINGLE_WEST11" ],
	OUT4 =>	[ "SINGLE_EAST14", "SINGLE_NORTH12", "SINGLE_NORTH13", "SINGLE_SOUTH13", "SINGLE_SOUTH15", "SINGLE_WEST19" ],
	OUT5 =>	[ "SINGLE_EAST15", "SINGLE_EAST17", "SINGLE_NORTH14", "SINGLE_SOUTH12", "SINGLE_WEST16", "SINGLE_WEST17" ],
	OUT6 =>	[ "SINGLE_EAST18", "SINGLE_NORTH18", "SINGLE_NORTH20", "SINGLE_SOUTH17", "SINGLE_SOUTH19", "SINGLE_WEST21" ],
	OUT7 =>	[ "SINGLE_EAST20", "SINGLE_EAST23", "SINGLE_NORTH21", "SINGLE_SOUTH22", "SINGLE_WEST22", "SINGLE_WEST23" ]
	);

  # as these resources are the _connecting_ resources, the offset is the
  # inverse of the direction indicated (eg EAST becomes WEST on querying CLB)
  # so, offset from querying CLB is N => -1,0; S => 1,0; E => 0,-1; W => 0,1
  my %connect_offsets = (
	OUT0 =>	[ "0,-1", "-1,0", "-1,0", "1,0", "1,0", "0,1" ],
	OUT1 =>	[ "0,-1", "0,-1", "-1,0", "1,0", "0,1", "0,1" ],
	OUT2 =>	[ "0,-1", "-1,0", "-1,0", "1,0", "1,0", "0,1" ],
	OUT3 =>	[ "0,-1", "0,-1", "-1,0", "1,0", "0,1", "0,1" ],
	OUT4 =>	[ "0,-1", "-1,0", "-1,0", "1,0", "1,0", "0,1" ],
	OUT5 =>	[ "0,-1", "0,-1", "-1,0", "1,0", "0,1", "0,1" ],
	OUT6 =>	[ "0,-1", "-1,0", "-1,0", "1,0", "1,0", "0,1" ],
	OUT7 =>	[ "0,-1", "0,-1", "-1,0", "1,0", "0,1", "0,1" ]
	);

  my $connect=($attr=~s/^connect_//) ? "connect" : "";
  my $offset="";

  if ($#settings<0) { $settings[0]=""; }	# no changes - no line selected
  if ($#settings<1) { $settings[1]=""; }	# use default ON/OFF setting

  $lineno=$settings[0];
  $onoff=($settings[1] ne "") ? $onofftable{$settings[1]} : $DEFAULT_ON_OFF;

  if ($lineno ne "") {
    $jattr="OUT" . $attr;

    # ensure that within legal range for line choice
    $nlines=$#{$jtable{$jattr}}+1;
    $single=$jtable{$jattr}->[($lineno-1) % $nlines];
    if ($connect ne "") {
      $offset=$connect_offsets{$jattr}->[($lineno-1) % $nlines];
    }

    # this is not a slice-based resource, so don't worry about slice0/1
    $bits="OutMuxToSingle." . $jattr . "_TO_" . $single;
    $val="OutMuxToSingle." . $onoff;
    $bitsval="$bits,$val";
    # eg OutMuxToSingle.OUT1_TO_SINGLE_WEST5,OutMuxToSingle.ON

    $bitsval=($connect eq "") ? "jbits=".$bitsval
    			      : "connect=jbits,".$offset.",".$bitsval;
  }
      
  $bitsval;
}




# conv2jbits_OutToSingleDir:
#   takes:
#	attr:		connecting single's output direction (E,N,S,W)
#			may be prepended with "connect_" if it is a
#			connecting resource (queried from another CLB)
#	settings[0]:	line: integer 1-12, indicating chosen outbus-single
#			line and "" for ignore/no change
#	settings[1]:	setting: 0 or 1, indicating line OFF or ON
#			or "" indicating default - here we default to ON
#
#   returns:
#	bitsval:	a string containing JBits resource & setting
#			constants, or empty if no line selected. in format:
#				jbits=details
#			or      connect=jbits,rowoffset,coloffset,details
#			details is in form: bits-constname,value-constname
#
#   Notes:
#	contention problems are possible for:
#	  E5/W5 E11/W11 E17/W17 E23/W23 singles between horiz adjacent CLBs
#	  N0/S0 N1/S1   N12/S12 N13/S13 singles between vert adjacent CLBs

sub conv2jbits_OutToSingleDir {
  my ($attr, @settings) = @_;
  my ($nlines,$lineno,$onoff,$single);
  my ($jattr,$bits,$val);
  my $bitsval;
  my $DEFAULT_ON_OFF="ON";	# change default here if needed
  my %onofftable = ( 0 => "OFF", 1 => "ON" );
  my %dirtable = (
  	E => "EAST",
	W => "WEST",
	N => "NORTH",
	S => "SOUTH"
	);
  my %jtable = (
	NORTH => [ "OUT0_TO_SINGLE_NORTH0", "OUT0_TO_SINGLE_NORTH1", "OUT1_TO_SINGLE_NORTH2", "OUT2_TO_SINGLE_NORTH6", "OUT2_TO_SINGLE_NORTH8", "OUT3_TO_SINGLE_NORTH9", "OUT4_TO_SINGLE_NORTH12", "OUT4_TO_SINGLE_NORTH13", "OUT5_TO_SINGLE_NORTH14", "OUT6_TO_SINGLE_NORTH18", "OUT6_TO_SINGLE_NORTH20", "OUT7_TO_SINGLE_NORTH21" ],
	SOUTH => [ "OUT1_TO_SINGLE_SOUTH0", "OUT0_TO_SINGLE_SOUTH1", "OUT0_TO_SINGLE_SOUTH3", "OUT2_TO_SINGLE_SOUTH5", "OUT2_TO_SINGLE_SOUTH7", "OUT3_TO_SINGLE_SOUTH10", "OUT5_TO_SINGLE_SOUTH12", "OUT4_TO_SINGLE_SOUTH13", "OUT4_TO_SINGLE_SOUTH15", "OUT6_TO_SINGLE_SOUTH17", "OUT6_TO_SINGLE_SOUTH19", "OUT7_TO_SINGLE_SOUTH22" ],
	EAST => [ "OUT0_TO_SINGLE_EAST2", "OUT1_TO_SINGLE_EAST3", "OUT1_TO_SINGLE_EAST5", "OUT2_TO_SINGLE_EAST6", "OUT3_TO_SINGLE_EAST8", "OUT3_TO_SINGLE_EAST11", "OUT4_TO_SINGLE_EAST14", "OUT5_TO_SINGLE_EAST15", "OUT5_TO_SINGLE_EAST17", "OUT6_TO_SINGLE_EAST18", "OUT7_TO_SINGLE_EAST20", "OUT7_TO_SINGLE_EAST23" ],
	WEST => [ "OUT1_TO_SINGLE_WEST4", "OUT1_TO_SINGLE_WEST5", "OUT0_TO_SINGLE_WEST7", "OUT2_TO_SINGLE_WEST9", "OUT3_TO_SINGLE_WEST10", "OUT3_TO_SINGLE_WEST11", "OUT5_TO_SINGLE_WEST16", "OUT5_TO_SINGLE_WEST17", "OUT4_TO_SINGLE_WEST19", "OUT6_TO_SINGLE_WEST21", "OUT7_TO_SINGLE_WEST22", "OUT7_TO_SINGLE_WEST23" ]
	);

  # as these resources are the _connecting_ resources, the offset is the
  # inverse of the direction indicated (eg EAST becomes WEST on querying CLB)
  # so, offset from querying CLB is N => -1,0; S => 1,0; E => 0,-1; W => 0,1
  my %connect_offsets  = (
	NORTH => [ "-1,0", "-1,0", "-1,0", "-1,0", "-1,0", "-1,0", "-1,0", "-1,0", "-1,0", "-1,0", "-1,0", "-1,0" ],
	SOUTH => [ "1,0", "1,0", "1,0", "1,0", "1,0", "1,0", "1,0", "1,0", "1,0", "1,0", "1,0", "1,0" ],
	EAST => [ "0,-1", "0,-1", "0,-1", "0,-1", "0,-1", "0,-1", "0,-1", "0,-1", "0,-1", "0,-1", "0,-1", "0,-1" ],
	WEST => [ "0,1", "0,1", "0,1", "0,1", "0,1", "0,1", "0,1", "0,1", "0,1", "0,1", "0,1", "0,1" ]
	);

  my $connect=($attr=~s/^connect_//) ? "connect" : "";
  my $offset="";

  if ($#settings<0) { $settings[0]=""; }	# no changes - no line selected
  if ($#settings<1) { $settings[1]=""; }	# use default ON/OFF setting

  $lineno=$settings[0];
  $onoff=($settings[1] ne "") ? $onofftable{$settings[1]} : $DEFAULT_ON_OFF;

  if ($lineno ne "") {
    $jattr=$dirtable{$attr};

    # ensure that within legal range for line choice
    $nlines=$#{$jtable{$jattr}}+1;
    $single=$jtable{$jattr}->[($lineno-1) % $nlines];
    if ($connect ne "") {
      $offset=$connect_offsets{$jattr}->[($lineno-1) % $nlines];
    }

    # this is not a slice-based resource, so don't worry about slice0/1
    $bits="OutMuxToSingle." . $single; # eg OutMuxToSingle.OUT1_TO_SINGLE_WEST5
    $val="OutMuxToSingle." . $onoff;   # eg OutMuxToSingle.ON 
    $bitsval="$bits,$val";

    $bitsval=($connect eq "") ? "jbits=".$bitsval
    			      : "connect=jbits,".$offset.",".$bitsval;
  }

  $bitsval;
}




# conv2jbits_SliceRAM:
#   takes:
#	attr:		dual mode: DUAL_OFF or DUAL_ON
#	settings[0]:	setting: one of LUT, RAM, SHIFT, 32X1
#			and "" for ignore/no change
#
#   returns:
#	bitsval:	a string containing JBits class name (slice dependent)
#			and the bits constants to be set to ON, all the other
#			bits need to be turned OFF by the JBits code. the
#			return format is:
#			  SliceRAM=class-prefix,on-bits1,on-bits2,..

sub conv2jbits_SliceRAM {
  my ($attr, @settings) = @_;
  my $classbits;
#  my $bits;
#  my %ramtable = ( LUT     => "LUT_MODE",
#  		   RAM     => "F_LUT_RAM,G_LUT_RAM",
#		   SHIFT   => "F_LUT_SHIFTER,G_LUT_SHIFTER",
#		   "32X1"  => "RAM_32_X_1"
#		 );
#
#  if ($#settings<0) {
#    $classbits="";
#  } else {
#    $bits=$ramtable{$settings[0]};
#    if ($attr eq "DUAL_ON") {
#      $bits="DUAL_MODE," . $bits;
#    }
#
#    # only the class prefix is slice-specific
#    $classbits="SliceRAM=S0RAM,$bits/S1RAM,$bits";
#  }
#
#  $classbits;

  # we don't use SliceRAM in this slimmed down model
  $classbits="";
}




# conv2jbits_LUTBitFN:
#   takes:
#	attr:		the LUT being set (F or G)
#	settings[0]:	binary string (upto 16 bits), which is the fn setting
#			or "" indicating ignore - no change
#
#   returns:
#	bitsval:	a string containing JBits resource & setting
#			constants, or empty if incomplete. in format:
#				LUT=bits-const-name,LUT-setting
#
#   Notes:		may be less than 16 bits, if so, then ignore
#			also note that truth table inputs are ordered as
#			L4,L3,L2,L1, and not L1,L2,L3,L4; and LUT config
#			arrays are loaded LSB

sub conv2jbits_LUTBitFN {
  my ($attr, @settings) = @_;
  my ($binstr,$bits0G,$bits0F,$bits1G,$bits1F,$val);
  my $bitsval="";

  if ($#settings<0) { $settings[0]=""; }
  $binstr=$settings[0];

  if ($attr ne "" && length($binstr)==16) { # need full 16 bit config
    # we ignore the attribute, as only 1 LUT per LE
    # only the bits is slice-specific
    $bits0G="LUT.SLICE0_G";
    $bits0F="LUT.SLICE0_F";
    $bits1G="LUT.SLICE1_G";
    $bits1F="LUT.SLICE1_F";
 
    $val=$binstr;
    $val=~tr/01/10/;			# need to be inverted to store

    $bitsval="LUT=$bits0G,$val/$bits0F,$val/$bits1G,$val/$bits1F,$val";
  }

  $bitsval;
}




# conv2jbits_LUTIncrFN:
#   takes:
#	attr:		the LUT being set (F or G)
#	settings[0]:	set: how to combine this function with pre-existing
#			     LUT fn - one of: "SET","OR","XOR","AND"
#	settings[1]:	op: boolean operation to apply to selected lines,
#			    one of: AND,OR,XOR,XNOR,NAND,NOR,MJR0,MJR1
#	settings[2]:	lines: 4 char string indicating lines involved in fn
#			       0's indicate inverted line, 1's uninverted
#			       input, and -'s for line not used in fn
#
#   returns:
#	bitsval:	a string containing JBits resource constant and LUT
#			incremental fn, or empty if incomplete. in format:
#				LUTIncrFN=bits-const-name,set,op,lines
#
#   Notes:		if any of settings[0,1,2] is "", this indicates
#			ignore - no change

sub conv2jbits_LUTIncrFN {
  my ($attr, @settings) = @_;
  my ($set,$op,$lines);
  my ($bits0G,$bits0F,$bits1G,$bits1F,$val);
  my $bitsval="";

  if ($attr ne "" && $#settings>=2) {	# need all the settings, else ignore
    # we ignore the attribute, as only 1 LUT per LE
    # only the bits is slice-specific
    $bits0G="LUT.SLICE0_G";
    $bits0F="LUT.SLICE0_F";
    $bits1G="LUT.SLICE1_G";
    $bits1F="LUT.SLICE1_F";

    $set=$settings[0];
    $op=$settings[1];
    $lines=$settings[2];

    $val="$set,$op,$lines";
    $bitsval="$bits0G,$val/$bits0F,$val/$bits1G,$val/$bits1F,$val";
    $bitsval="LUTIncrFN=" . $bitsval;
  }

  $bitsval;
}




# conv2jbits_LUTActiveFN:
#   takes:
#	attr:		the LUT being set (F or G)
#	settings[0]:	op: boolean operation to apply to selected lines,
#			    one of: AND,OR,XOR,XNOR,NAND,NOR,MJR0,MJR1
#	settings[1]:	lines: 4 char string indicating which lines inverted
#		 	       for active (only) lines 1-4
#		 		0's indicate inverted line
#				1's - input line uninverted

#
#   returns:
#	bitsval:	a string containing JBits resource constant and LUT
#			incremental fn, or empty if incomplete. in format:
#				LUTActiveFN=bits-const-name,op,lines
#
#   Notes:		if settings[0] is "", this indicates ignore - no change
#			if settings[1] is missing, use default inversion
#			template of "1111";

sub conv2jbits_LUTActiveFN {
  my ($attr, @settings) = @_;
  my ($bits0G,$bits0F,$bits1G,$bits1F,$val);
  my $op="";
  my $lines="1111";
  my $bitsval="";

  if ($attr ne "" && $#settings>-1) {	# need settings[0], else ignore
    # we ignore the attribute, as only 1 LUT per LE
    # only the bits is slice-specific
    $bits0G="LUT.SLICE0_G";
    $bits0F="LUT.SLICE0_F";
    $bits1G="LUT.SLICE1_G";
    $bits1F="LUT.SLICE1_F";

    $op=$settings[0];
    if ($#settings>0) {
      $lines=$settings[1];
    }

    $val="$op,$lines";
    $bitsval="$bits0G,$val/$bits0F,$val/$bits1G,$val/$bits1F,$val";
    $bitsval="LUTActiveFN=" . $bitsval;
  }

  $bitsval;
}



